"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[41089],{49613:function(r,e,t){t.d(e,{Zo:function(){return u},kt:function(){return d}});var n=t(59496);function a(r,e,t){return e in r?Object.defineProperty(r,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):r[e]=t,r}function o(r,e){var t=Object.keys(r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(r);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.push.apply(t,n)}return t}function i(r){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(r,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(t,e))}))}return r}function l(r,e){if(null==r)return{};var t,n,a=function(r,e){if(null==r)return{};var t,n,a={},o=Object.keys(r);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||(a[t]=r[t]);return a}(r,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(r,t)&&(a[t]=r[t])}return a}var s=n.createContext({}),p=function(r){var e=n.useContext(s),t=e;return r&&(t="function"==typeof r?r(e):i(i({},e),r)),t},u=function(r){var e=p(r.components);return n.createElement(s.Provider,{value:e},r.children)},c={inlineCode:"code",wrapper:function(r){var e=r.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(r,e){var t=r.components,a=r.mdxType,o=r.originalType,s=r.parentName,u=l(r,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return t?n.createElement(f,i(i({ref:e},u),{},{components:t})):n.createElement(f,i({ref:e},u))}));function d(r,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof r||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=r,l.mdxType="string"==typeof r?r:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},49053:function(r,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var n=t(96600),a=t(27279),o=(t(59496),t(49613)),i=["components"],l={id:"terraform-provider",title:"Terraform Provider"},s="Terraform Provider",p={unversionedId:"ops/infra/terraform/terraform-provider",id:"ops/infra/terraform/terraform-provider",title:"Terraform Provider",description:"Tips",source:"@site/../notes/ops/infra/terraform/terraform-provider.md",sourceDirName:"ops/infra/terraform",slug:"/ops/infra/terraform/terraform-provider",permalink:"/notes/ops/infra/terraform/terraform-provider",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/../notes/ops/infra/terraform/terraform-provider.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1663838677,formattedLastUpdatedAt:"Sep 22, 2022",frontMatter:{id:"terraform-provider",title:"Terraform Provider"},sidebar:"docs",previous:{title:"Terraform K8S",permalink:"/notes/ops/infra/terraform/terraform-k8s"},next:{title:"Mirrors",permalink:"/notes/ops/mirrors"}},u={},c=[{value:"Tips",id:"tips",level:2},{value:"keycloak",id:"keycloak",level:2},{value:"null",id:"null",level:2}],m={toc:c};function d(r){var e=r.components,t=(0,a.Z)(r,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"terraform-provider"},"Terraform Provider"),(0,o.kt)("h2",{id:"tips"},"Tips"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\b\u5b98\u65b9 Provider \u53d1\u5e03\u5730\u5740 ",(0,o.kt)("a",{parentName:"li",href:"https://releases.hashicorp.com/"},"releases.hashicorp.com")),(0,o.kt)("li",{parentName:"ul"},"\u672c\u5730\u5b89\u88c5\u76ee\u5f55 ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.terraform.d/plugins")),(0,o.kt)("li",{parentName:"ul"},"\u53c2\u8003",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.terraform.io/docs/extend/writing-custom-providers.html"},"Writing Custom Providers"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# \u624b\u52a8\u4e0b\u8f7d\u5b89\u88c5\nos=darwin\narch=amd64\nprivder=gitlab\nver=2.10.0\ncurl -OLC- https://releases.hashicorp.com/terraform-provider-$provider/$ver/terraform-provider-${provider}_${ver}_${os}_${arch}.zip\nunzip terraform-provider-${provider}-*\nmv terraform-provider-${provider}_v* ~/.terraform.d/plugins/${os}_${arch}/terraform-provider-${provider}\n")),(0,o.kt)("h2",{id:"keycloak"},"keycloak"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mrparkers/terraform-provider-keycloak"},"mrparkers/terraform-provider-keycloak"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"")),(0,o.kt)("h2",{id:"null"},"null"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7279\u6b8a\u573a\u666f\u4f7f\u7528\uff0c\u201c\u4e0d\u505a\u201d\u4efb\u4f55\u4e8b\u60c5")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'resource "aws_instance" "cluster" {\n  count = 3\n}\n\nresource "null_resource" "cluster" {\n  # \u89e6\u53d1 - \u5f53\u53d1\u9001\u53d8\u5316\uff0c\u8be5\u8d44\u6e90\u4f1a\u88ab provisioner \u66ff\u4ee3\n  triggers = {\n    cluster_instance_ids = "${join(",", aws_instance.cluster.*.id)}"\n  }\n\n  # \u94fe\u63a5\u8fdc\u7a0b\n  connection {\n    host = "${element(aws_instance.cluster.*.public_ip, 0)}"\n  }\n\n  # \u6267\u884c\u672c\u5730\u547d\u4ee4\n  provisioner "local-exec" {\n    command = "bootstrap-cluster.sh ${join(" ", aws_instance.cluster.*.private_ip)}"\n  }\n}\n\n# \u6536\u96c6\u4e2d\u95f4\u503c\uff0c\u4ee5\u4fbf\u4e8e\u540e\u9762\u914d\u7f6e\u4f7f\u7528\ndata "null_data_source" "values" {\n  inputs = {\n    all_server_ids = "${concat(aws_instance.green.*.id, aws_instance.blue.*.id)}"\n    all_server_ips = "${concat(aws_instance.green.*.private_ip, aws_instance.blue.*.private_ip)}"\n  }\n\n  # \u6d4b\u8bd5\u4f7f\u7528 - \u8be5\u8d44\u6e90\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u503c\n  has_computed_default = "default"\n}\n\nresource "aws_elb" "main" {\n  instances = "${data.null_data_source.values.outputs["all_server_ids"]}"\n}\n\noutput "all_server_ids" {\n  value = "${data.null_data_source.values.outputs["all_server_ids"]}"\n}\n\noutput "all_server_ips" {\n  value = "${data.null_data_source.values.outputs["all_server_ips"]}"\n}\n')))}d.isMDXComponent=!0}}]);