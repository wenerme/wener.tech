"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[26853],{49613:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return d}});var a=t(59496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},f=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,y=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return t?a.createElement(y,o(o({ref:n},f),{},{components:t})):a.createElement(y,o({ref:n},f))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},75385:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return u},metadata:function(){return y},toc:function(){return g}});var a=t(49613),r=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,f=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))s.call(n,t)&&f(e,t,n[t]);if(l)for(var t of l(n))c.call(n,t)&&f(e,t,n[t]);return e};const u={title:"Flyway"},d="Flyway",y={unversionedId:"java/lib/flyway",id:"java/lib/flyway",title:"Flyway",description:"- \u4f7f\u7528 SQL",source:"@site/../notes/java/lib/flyway.md",sourceDirName:"java/lib",slug:"/java/lib/flyway",permalink:"/notes/java/lib/flyway",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/java/lib/flyway.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1678678348,formattedLastUpdatedAt:"Mar 13, 2023",frontMatter:{title:"Flyway"},sidebar:"docs",previous:{title:"feign",permalink:"/notes/java/lib/feign"},next:{title:"Guava",permalink:"/notes/java/lib/guava"}},m={},g=[{value:"flyway --help",id:"flyway---help",level:2}],b={toc:g};function h(e){var n,t=e,{components:r}=t,f=((e,n)=>{var t={};for(var a in e)s.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&l)for(var a of l(e))n.indexOf(a)<0&&c.call(e,a)&&(t[a]=e[a]);return t})(t,["components"]);return(0,a.kt)("wrapper",(n=p(p({},b),f),i(n,o({components:r,mdxType:"MDXLayout"}))),(0,a.kt)("h1",p({},{id:"flyway"}),"Flyway"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528 SQL"),(0,a.kt)("li",{parentName:"ul"},"\u7b26\u5408\u4e00\u5b9a\u7684\u76ee\u5f55\u7ed3\u6784\u6807\u51c6\u5373\u53ef"),(0,a.kt)("li",{parentName:"ul"},"\u57fa\u4e8e Java, \u6613\u4e8e\u6dfb\u52a0\u81ea\u5b9a\u4e49\u914d\u7f6e")),(0,a.kt)("hr",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",p({parentName:"li"},{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html"}),"SpringBoot - Database Initialization")),(0,a.kt)("li",{parentName:"ul"},"undo \u53ea\u6709\u4e13\u4e1a\u7248\u624d\u6709")),(0,a.kt)("pre",null,(0,a.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# macOS \u5b89\u88c5\nbrew install flyway\n\n# \u8fc1\u79fb\nflyway -configFiles=path/to/myAlternativeConfig.conf migrate\n# \u53ef\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\nexport FLYWAY_CONFIG_FILES=path/to/myAlternativeConfig.conf,other.conf\n# \u663e\u793a\u8fc1\u79fb\u4fe1\u606f\nflyway info\n# baselineVersion=1 \u57fa\u7840\u7248\u672c\u53f7\n# baselineDescription=<< Flyway Baseline >> \u63cf\u8ff0\u4fe1\u606f\n# \u57fa\u4e8e\u73b0\u5728\u6570\u636e\u5e93\u505a Baseline\nflyway baseline\n\n# target \u76ee\u6807\u7248\u672c, \u9ed8\u8ba4\u4e3a\u6700\u65b0\nflyway migrate\n")),(0,a.kt)("pre",null,(0,a.kt)("code",p({parentName:"pre"},{className:"language-ini"}),"# \u793a\u4f8b\u914d\u7f6e\nflyway.driver=org.postgresql.Driver\nflyway.url=jdbc:postgresql://localhost:5432/flywaydemo\nflyway.user=flywaydemo\nflyway.password=flywaydemo\nflyway.locations=filesystem:src/main/resources/flyway/migrations\nflyway.sqlMigrationPrefix=V\nflyway.sqlMigrationSeparator=__\nflyway.sqlMigrationSuffix=.sql\nflyway.validateOnMigrate=true\n")),(0,a.kt)("h2",p({},{id:"flyway---help"}),"flyway --help"),(0,a.kt)("pre",null,(0,a.kt)("code",p({parentName:"pre"},{}),'Flyway Community Edition 5.0.2 by Boxfuse\n\nUsage\n=====\n\nflyway [options] command\n\nBy default, the configuration will be read from conf/flyway.conf.\nOptions passed from the command-line override the configuration.\n\nCommands\n--------\nmigrate  : Migrates the database\nclean    : Drops all objects in the configured schemas\ninfo     : Prints the information about applied, current and pending migrations\nvalidate : Validates the applied migrations against the ones on the classpath\nundo     : Undoes the most recently applied versioned migration\nbaseline : Baselines an existing database at the baselineVersion\nrepair   : Repairs the schema history table\n\nOptions (Format: -key=value)\n-------\ndriver                       : Fully qualified classname of the JDBC driver\nurl                          : Jdbc url to use to connect to the database\nuser                         : User to use to connect to the database\npassword                     : Password to use to connect to the database\nschemas                      : Comma-separated list of the schemas managed by Flyway\ntable                        : Name of Flyway\'s schema history table\nlocations                    : Classpath locations to scan recursively for migrations\nresolvers                    : Comma-separated list of custom MigrationResolvers\nskipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)\nsqlMigrationPrefix           : File name prefix for versioned SQL migrations\nundoSqlMigrationPrefix       : File name prefix for undo SQL migrations\nrepeatableSqlMigrationPrefix : File name prefix for repeatable SQL migrations\nsqlMigrationSeparator        : File name separator for sql migrations\nsqlMigrationSuffixes         : Comma-separated list of file name suffixes for sql migrations\nmixed                        : Allow mixing transactional and non-transactional statements\nencoding                     : Encoding of sql migrations\nplaceholderReplacement       : Whether placeholders should be replaced\nplaceholders                 : Placeholders to replace in sql migrations\nplaceholderPrefix            : Prefix of every placeholder\nplaceholderSuffix            : Suffix of every placeholder\ninstalledBy                  : Username that will be recorded in the schema history table\ntarget                       : Target version up to which Flyway should use migrations\noutOfOrder                   : Allows migrations to be run "out of order"\ncallbacks                    : Comma-separated list of FlywayCallback classes\nskipDefaultCallbacks         : Skips default callbacks (sql)\nvalidateOnMigrate            : Validate when running migrate\nignoreMissingMigrations      : Allow missing migrations when validating\nignoreFutureMigrations       : Allow future migrations when validating\ncleanOnValidationError       : Automatically clean on a validation error\ncleanDisabled                : Whether to disable clean\nbaselineVersion              : Version to tag schema with when executing baseline\nbaselineDescription          : Description to tag schema with when executing baseline\nbaselineOnMigrate            : Baseline on migrate against uninitialized non-empty schema\nconfigFiles                  : Comma-separated list of config files to use\nconfigFileEncoding           : Encoding to use when loading the config files\njarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations\ndryRunOutput                 : File where to output the SQL statements of a migration dry run\nerrorHandlers                : Comma-separated list of handlers for errors and warnings\n\nFlags\n-----\n-X : Print debug output\n-q : Suppress all output, except for errors and warnings\n-n : Suppress prompting for a user and password\n-v : Print the Flyway version and exit\n-? : Print this usage info and exit\n\nExample\n-------\nflyway -user=myuser -password=s3cr3t -url=jdbc:h2:mem -placeholders.abc=def migrate\n\nMore info at https://flywaydb.org/documentation/commandline\n')))}h.isMDXComponent=!0}}]);