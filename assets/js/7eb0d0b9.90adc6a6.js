"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[5528],{49613:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(59496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,b=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return t?r.createElement(b,o(o({ref:n},s),{},{components:t})):r.createElement(b,o({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},91976:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=t(96600),a=t(27279),i=(t(59496),t(49613)),o=["components"],l={id:"guava",title:"Guava"},u="Gauva",p={unversionedId:"java/library/guava",id:"java/library/guava",title:"Guava",description:"Tips",source:"@site/../notes/java/library/guava.md",sourceDirName:"java/library",slug:"/java/library/guava",permalink:"/notes/java/library/guava",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/../notes/java/library/guava.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1663838677,formattedLastUpdatedAt:"Sep 22, 2022",frontMatter:{id:"guava",title:"Guava"},sidebar:"docs",previous:{title:"Java Native",permalink:"/notes/java/java-native"},next:{title:"Hazelcast",permalink:"/notes/java/library/hazelcast"}},s={},c=[{value:"Tips",id:"tips",level:2},{value:"Performance",id:"performance",level:2},{value:"TypeToken",id:"typetoken",level:3},{value:"Immutable",id:"immutable",level:3}],m={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"gauva"},"Gauva"),(0,i.kt)("h2",{id:"tips"},"Tips"),(0,i.kt)("h2",{id:"performance"},"Performance"),(0,i.kt)("h3",{id:"typetoken"},"TypeToken"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5bf9\u6027\u80fd\u6709\u4e00\u5b9a\u5f71\u54cd, \u8c28\u614e\u4f7f\u7528")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Benchmark                       Mode  Cnt     Score     Error  Units\nBenchTypeToken.generic          avgt   10     4.001 \xb1   0.197  ns/op\nBenchTypeToken.typeTokenString  avgt   10   973.403 \xb1  13.519  ns/op\nBenchTypeToken.typeTokenTwo     avgt   10  3289.355 \xb1 134.182  ns/op\nBenchTypeToken.typeTokenVoid    avgt   10  1019.551 \xb1  43.565  ns/op\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@State(Scope.Thread)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Warmup(iterations = 4)\n@Measurement(iterations = 10)\n@BenchmarkMode(Mode.AverageTime)\npublic class BenchTypeToken {\n  public static void main(String[] args) throws RunnerException {\n    Options options =\n        new OptionsBuilder()\n            .include(BenchTypeToken.class.getSimpleName())\n            .threads(1)\n            .forks(1)\n            .shouldFailOnError(true)\n            .shouldDoGC(true)\n            .jvmArgs("-server")\n            .measurementTime(TimeValue.seconds(2))\n            .build();\n    new Runner(options).run();\n  }\n\n  @Benchmark\n  public void typeTokenString(Blackhole bh) {\n    bh.consume(new ATyped());\n  }\n\n  @Benchmark\n  public void typeTokenVoid(Blackhole bh) {\n    bh.consume(new ATyped());\n  }\n\n  @Benchmark\n  public void typeTokenTwo(Blackhole bh) {\n    bh.consume(new ATyped2());\n  }\n\n  @Benchmark\n  public void generic(Blackhole bh) {\n    bh.consume(new AGen());\n  }\n\n  static class ATyped extends TypedImpl<Void> {}\n\n  static class ATypedS extends TypedImpl<String> {}\n\n  static class ATyped2 extends TypedImpl2<Void, Void> {}\n\n  static class AGen extends GenImpl<Void> {}\n\n  @Getter\n  @Setter\n  static class TypedImpl<IN> {\n\n    private final TypeToken<IN> in = new TypeToken<IN>(getClass()) {};\n  }\n\n  @Getter\n  @Setter\n  static class TypedImpl2<IN, OUT> {\n\n    private final TypeToken<IN> in = new TypeToken<IN>(getClass()) {};\n    private final TypeToken<OUT> out = new TypeToken<OUT>(getClass()) {};\n  }\n\n  @Getter\n  @Setter\n  static class GenImpl<IN> {}\n}\n')),(0,i.kt)("h3",{id:"immutable"},"Immutable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6bd4\u6b63\u5e38\u7684\u6027\u80fd\u7a0d\u5fae\u597d\u4e00\u70b9\u70b9")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Benchmark                     Mode  Cnt     Score     Error  Units\nBenchImmutable.immutableList  avgt   10  4288.096 \xb1  97.184  ns/op\nBenchImmutable.immutableMap   avgt   10  7922.092 \xb1 368.066  ns/op\nBenchImmutable.list           avgt   10  4739.961 \xb1 131.327  ns/op\nBenchImmutable.map            avgt   10  8779.917 \xb1 498.843  ns/op\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@State(Scope.Thread)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Warmup(iterations = 4)\n@Measurement(iterations = 10)\n@BenchmarkMode(Mode.AverageTime)\npublic class BenchImmutable {\n  public static void main(String[] args) throws RunnerException {\n    Options options =\n        new OptionsBuilder()\n            .include(BenchImmutable.class.getSimpleName())\n            .threads(1)\n            .forks(1)\n            .shouldFailOnError(true)\n            .shouldDoGC(true)\n            .jvmArgs("-server")\n            .measurementTime(TimeValue.seconds(8))\n            .build();\n    new Runner(options).run();\n  }\n\n  @Benchmark\n  public void list(Blackhole bh) {\n    ArrayList<Integer> list = Lists.newArrayList();\n    for (int i = 0; i < 100; i++) {\n      list.add(i);\n    }\n    for (int i = 0; i < 1000; i++) {\n      bh.consume(list.get(i % 100));\n    }\n  }\n\n  @Benchmark\n  public void immutableList(Blackhole bh) {\n    Builder<Integer> builder = ImmutableList.builder();\n    for (int i = 0; i < 100; i++) {\n      builder.add(i);\n    }\n    ImmutableList<Integer> list = builder.build();\n    for (int i = 0; i < 1000; i++) {\n      bh.consume(list.get(i % 100));\n    }\n  }\n\n  @Benchmark\n  public void map(Blackhole bh) {\n    HashMap<Integer, Integer> map = Maps.newHashMap();\n\n    for (int i = 0; i < 100; i++) {\n      map.put(i, i);\n    }\n    for (int i = 0; i < 1000; i++) {\n      bh.consume(map.get(i % 100));\n    }\n  }\n\n  @Benchmark\n  public void immutableMap(Blackhole bh) {\n    ImmutableMap.Builder<Integer, Integer> builder = ImmutableMap.builder();\n\n    for (int i = 0; i < 100; i++) {\n      builder.put(i, i);\n    }\n    ImmutableMap<Integer, Integer> map = builder.build();\n    for (int i = 0; i < 1000; i++) {\n      bh.consume(map.get(i % 100));\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);