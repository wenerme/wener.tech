"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[33701],{49613:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return f}});var n=a(59496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(a),f=r,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||i;return a?n.createElement(d,o(o({ref:t},s),{},{components:a})):n.createElement(d,o({ref:t},s))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},98213:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var n=a(96600),r=a(27279),i=(a(59496),a(49613)),o=["components"],l={title:"AVIF"},c="AVIF",p={unversionedId:"service/media/format/avif",id:"service/media/format/avif",title:"AVIF",description:"- AVIF",source:"@site/../notes/service/media/format/avif.md",sourceDirName:"service/media/format",slug:"/service/media/format/avif",permalink:"/notes/service/media/format/avif",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/../notes/service/media/format/avif.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1663838677,formattedLastUpdatedAt:"Sep 22, 2022",frontMatter:{title:"AVIF"},sidebar:"docs",previous:{title:"AV1",permalink:"/notes/service/media/format/av1"},next:{title:"gif",permalink:"/notes/service/media/format/gif"}},s={},m=[],u={toc:m};function f(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"avif"},"AVIF"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"AVIF",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u884d\u751f\u81ea AV1 - I-frame from AV1"),(0,i.kt)("li",{parentName:"ul"},"\u76ee\u7684\u662f\u53d6\u4ee3 JPEG"),(0,i.kt)("li",{parentName:"ul"},"\u4e2d\u4f4e\u6e05\u573a\u666f\u66f4\u597d - Web",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u56e0\u4e3a video-derived format"),(0,i.kt)("li",{parentName:"ul"},"\u7167\u7247\u5927\u591a\u65f6\u5019\u4e5f\u4f18\u4e8e jpegxl"))),(0,i.kt)("li",{parentName:"ul"},"\u6700\u5927\u5206\u8fa8\u7387 65536x65536"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://avif.io/blog/comparisons/avif-vs-jpegxl/"},"https://avif.io/blog/comparisons/avif-vs-jpegxl/")),(0,i.kt)("li",{parentName:"ul"},"cq-level 0-63"),(0,i.kt)("li",{parentName:"ul"},"cq - Constant/Constrained Quality"),(0,i.kt)("li",{parentName:"ul"},"end-usage - Rate control mode - vbr, cbr, cq, or q"),(0,i.kt)("li",{parentName:"ul"},"tune - psnr,ssim,butteraugli default: psnr"),(0,i.kt)("li",{parentName:"ul"},"butteraugli rate distortion tuning"),(0,i.kt)("li",{parentName:"ul"},"Adaptive quantization"),(0,i.kt)("li",{parentName:"ul"},"\u53c2\u6570\u81ea\u52a8\u8c03\u4f18"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AOMediaCodec/libavif"},"AOMediaCodec/libavif")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AOMediaCodec/av1-avif"},"AOMediaCodec/av1-avif")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://jakearchibald.com/2020/avif-has-landed/"},"avif-has-landed")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/dreampiggy/AVIFQuickLook"},"https://github.com/dreampiggy/AVIFQuickLook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/AOMediaCodec/av1-avif/wiki#implementations"},"implementations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://old.reddit.com/r/AV1/comments/o7s8hk/high_quality_encoding_of_avif_images_using/"},"https://old.reddit.com/r/AV1/comments/o7s8hk/high_quality_encoding_of_avif_images_using/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://chipsandcheese.com/author/blueswordm/"},"https://chipsandcheese.com/author/blueswordm/"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# macOS\nbrew install joedrago/repo/avifenc\n# AlpineLinux\napk add libavif-apps\n# Debian\napt install libavif-bin\n\n# 16 MB\n# -> 1.8 MB\n# -> speed 10 1.7 MB\n# \u548c cjxl -d 1 \u533a\u522b\u4e0d\u5927\n# \u9ed8\u8ba4 speed [6], color QP [24 (Medium) <-> 26 (Medium)], alpha QP [0 (Lossless) <-> 0 (Lossless)], tileRowsLog2 [0], tileColsLog2 [0], 1 worker thread(s)\navifenc input.jpg input.avif\n# \u63a8\u8350\navifenc --min 0 --max 63 -a end-usage=q -a cq-level=18 -a tune=ssim input.jpg input.avif\n\n# intra-only\n# -a color:sharpness=2 \u9ed8\u8ba4 0\n#   how much detail retention you want vs artifacts\n# -a color:enable-chroma-deltaq=1 chroma Q variation per SB. Free quality increase\n# -a color:qm-min=0 \u9ed8\u8ba4 8\n# -a color:deltaq-mode=3\n# -a color:aq-mode=1\n#   variance based AQ mode, works well for intra-only photographic\navifenc -s 6 -j $(nproc) --min 0 --max 63 -a end-usage=q -a cq-level=XX -a color:aq-mode=1 -a color:sharpness=2 -a tune=butteraugli -a color:enable-chroma-deltaq=1 -a color:qm-min=0 -a color:deltaq-mode=3 i.png o.avif\n\n# \u65e0\u635f - \u9ed8\u8ba4\u5355\u7ebf\u7a0b\u5f88\u6162 - jpegxl \u9ed8\u8ba4\u538b\u51fa\u6765 4.1M\n# 3.4M -> 2.1M\navifenc -l input.png png.avif\n\n# Batch\nls *.jpg | xargs basename -s .jpg | xargs -I {} avifenc -j 12 --min 0 --max 63 -a end-usage=q -a cq-level=18 -a tune=ssim  {}.jpg ../avif/{}.avif\nfind input -type d | xargs -I {} mkdir -p \"avif/{}\"\nfind input -type f -iname '*.jpg' | sed 's/.jpg$//' | xargs -I {} avifenc -j $(nproc) --min 0 --max 63 -a end-usage=q -a cq-level=18 -a tune=ssim -a color:aq-mode=1 -a color:sharpness=2 -a color:enable-chroma-deltaq=1 -a color:qm-min=0 {}.jpg avif/{}.avif\n")))}f.isMDXComponent=!0}}]);