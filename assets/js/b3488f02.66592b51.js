"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[12935],{49613:function(e,n,t){t.d(n,{Zo:function(){return i},kt:function(){return f}});var r=t(59496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},i=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,s(s({ref:n},i),{},{components:t})):r.createElement(f,s({ref:n},i))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},46080:function(e,n,t){t.r(n),t.d(n,{assets:function(){return v},contentTitle:function(){return b},default:function(){return O},frontMatter:function(){return f},metadata:function(){return k},toc:function(){return y}});var r=t(49613),a=Object.defineProperty,o=Object.defineProperties,s=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,i=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))u.call(n,t)&&i(e,t,n[t]);if(l)for(var t of l(n))c.call(n,t)&&i(e,t,n[t]);return e},d=(e,n)=>o(e,s(n)),m=(e,n)=>{var t={};for(var r in e)u.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&l)for(var r of l(e))n.indexOf(r)<0&&c.call(e,r)&&(t[r]=e[r]);return t};const f={title:"Consul"},b="Consul",k={unversionedId:"devops/kubernetes/app/k8s-consul",id:"devops/kubernetes/app/k8s-consul",title:"Consul",description:"- Consul K8S \u4f7f\u7528\u573a\u666f",source:"@site/../notes/devops/kubernetes/app/k8s-consul.md",sourceDirName:"devops/kubernetes/app",slug:"/devops/kubernetes/app/k8s-consul",permalink:"/notes/devops/kubernetes/app/k8s-consul",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/devops/kubernetes/app/k8s-consul.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1693122196,formattedLastUpdatedAt:"Aug 27, 2023",frontMatter:{title:"Consul"},sidebar:"docs",previous:{title:"Kubernetest Application FAQ",permalink:"/notes/devops/kubernetes/app/k8s-app-faq"},next:{title:"Minio",permalink:"/notes/devops/kubernetes/app/k8s-minio"}},v={},y=[{value:"DNS",id:"dns",level:2},{value:"ACL",id:"acl",level:2}],h={toc:y},g="wrapper";function O(e){var n=e,{components:t}=n,a=m(n,["components"]);return(0,r.kt)(g,d(p(p({},h),a),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",p({},{id:"consul"}),"Consul"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/hashicorp/consul-k8s"}),"Consul K8S")," \u4f7f\u7528\u573a\u666f",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u90e8\u7f72 Consul \u96c6\u7fa4\u670d\u52a1"),(0,r.kt)("li",{parentName:"ul"},"\u5141\u8bb8 Consol \u5ba2\u6237\u7aef\u6253\u901a\u670d\u52a1"),(0,r.kt)("li",{parentName:"ul"},"Connect Service Mesh"),(0,r.kt)("li",{parentName:"ul"},"\u540c\u6b65 K8S \u670d\u52a1\u5230 Consul"))),(0,r.kt)("li",{parentName:"ul"},"\u5b89\u88c5\u4f9d\u8d56 PV \u5b58\u50a8"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://www.consul.io/docs/k8s"}),"\u6587\u6863"))),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'helm repo add hashicorp https://helm.releases.hashicorp.com\n\n# \u9ed8\u8ba4\u90e8\u7f72    server client dns ui\n# \u9ed8\u8ba4\u4e0d\u90e8\u7f72 tls acl federation externalService snapshotAgent syncCatalog\n#   connectInject centralConfig meshGateway ingressGateways terminatingGateways\n# \u9ed8\u8ba4 datacenter \u4e3a dc1\n# \u5b89\u88c5\u5230 service \u7a7a\u95f4\n# --set server.affinity=null \u5141\u8bb8\u5b89\u88c5\u5230\u5355\u673a\n# server.storageClass \u4fee\u6539\u5b58\u50a8\u7c7b\u578b\nhelm install consul hashicorp/consul \\\n  -n consul --create-namespace \\\n  --set global.name=consul --set global.datacenter=center\n\n# \u8f6c\u53d1 UI\n# \u9ed8\u8ba4\u6ca1\u6709 tls \u548c acl\nkubectl port-forward -n consul svc/consul-server 8500:8500\n# \u5982\u679c\u542f\u7528\u4e86 ACL\nkubectl get -n consul secrets/consul-bootstrap-acl-token --template={{.data.token}} | base64 -d\n\n# \u8bbf\u95ee consul\n# \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709 agent \u56e0\u6b64\u76f4\u63a5\u4f7f\u7528 HOST_IP \u5373\u53ef\nexport CONSUL_HTTP_ADDR="${HOST_IP}:8500"\nconsul kv put hello world\n')),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"env:\n  - name: ADVERTISE_IP\n    valueFrom:\n      fieldRef:\n        fieldPath: status.podIP\n  - name: NAMESPACE\n    valueFrom:\n      fieldRef:\n        fieldPath: metadata.namespace\n  - name: NODE\n    valueFrom:\n      fieldRef:\n        fieldPath: status.nodeName\n  - name: HOST_IP\n    valueFrom:\n      fieldRef:\n        fieldPath: status.hostIP\n  - name: CONSUL_HTTP_ADDR\n    value: $(HOST_IP):8500\n")),(0,r.kt)("h2",p({},{id:"dns"}),"DNS"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'# KubeDNS\n# ==========\nCONSUL_DNS_IP=$(kubectl get svc consul-dns -o jsonpath=\'{.spec.clusterIP}\' -n service)\ncat << EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    addonmanager.kubernetes.io/mode: EnsureExists\n  name: kube-dns\n  namespace: kube-system\ndata:\n  stubDomains: |\n    {"consul": ["$CONSUL_DNS_IP"]}\nEOF\n\nkubectl get configmap kube-dns -n kube-system -o yaml\n\n# CoreDNS\n# ==========\nkubectl edit configmap coredns -n kube-system\n# Corefile: |\n#   consul {\n#     errors\n#     cache 30\n#     forward . <consul-dns-service-cluster-ip>\n#   }\n\n# \u6d4b\u8bd5\u89e3\u6790\nkubectl run --rm -i -t dns-test --image=wener/base --restart=Never -- nslookup consul.service.consul\n')),(0,r.kt)("h2",p({},{id:"acl"}),"ACL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://www.consul.io/docs/security/acl/auth-methods/kubernetes"}),"Kubernetes Auth Method"))))}O.isMDXComponent=!0}}]);