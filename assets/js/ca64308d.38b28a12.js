"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[53356],{49613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(59496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=s(n),d=o,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||i;return n?r.createElement(m,c(c({ref:t},u),{},{components:n})):r.createElement(m,c({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},70512:function(e,t,n){n.r(t),n.d(t,{assets:function(){return E},contentTitle:function(){return d},default:function(){return O},frontMatter:function(){return f},metadata:function(){return m},toc:function(){return N}});var r=n(49613),o=Object.defineProperty,i=Object.defineProperties,c=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&u(e,n,t[n]);if(a)for(var n of a(t))s.call(t,n)&&u(e,n,t[n]);return e};const f={title:"tinc 1.0"},d="tinc 1.0",m={unversionedId:"service/network/tinc/tinc-1.0",id:"service/network/tinc/tinc-1.0",title:"tinc 1.0",description:"- \u53ea\u6709 tincd",source:"@site/../notes/service/network/tinc/tinc-1.0.md",sourceDirName:"service/network/tinc",slug:"/service/network/tinc/1.0",permalink:"/notes/service/network/tinc/1.0",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/network/tinc/tinc-1.0.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1647984068,formattedLastUpdatedAt:"Mar 22, 2022",frontMatter:{title:"tinc 1.0"},sidebar:"docs",previous:{title:"Tinc",permalink:"/notes/service/network/tinc/"},next:{title:"Tinc \u914d\u7f6e",permalink:"/notes/service/network/tinc/conf"}},E={},N=[],y={toc:N};function O(e){var t,n=e,{components:o}=n,u=((e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&a)for(var r of a(e))t.indexOf(r)<0&&s.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=p(p({},y),u),i(t,c({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("h1",p({},{id:"tinc-10"}),"tinc 1.0"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u53ea\u6709 tincd")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"NETNAME=netname\nNODE=NodeA\nmkdir -p /etc/tinc/$NETNAME/hosts\n# tinc.conf\ncat <<CONF > /etc/tinc/$NETNAME/tinc.conf\nName = $NODE\nMode = switch\n# ConnectTo = $NETANAME\nCONF\n\n# \u751f\u6210 key\ntincd -n $NETNAME -K\n\n\n# tinc-up\ncat <<SH > /etc/tinc/$NETNAME/tinc-up\nifconfig $INTERFACE 10.10.1.1 netmask 255.0.0.0\nSH\n\n# \u968f\u673a port\ncat <<CONF > /etc/tinc/$NETNAME/hosts/$NODE\nPort = 0\nCONF\n\n# \u6dfb\u52a0\u5176\u4ed6\u8282\u70b9\ncat <<CONF > /etc/tinc/$NETNAME/hosts/$NETNAME\n# Subnet = 10.10.0.0/24\nAddress = 4.5.6.7\n\n-----BEGIN RSA PUBLIC KEY-----\n...\n-----END RSA PUBLIC KEY-----\nCONF\n\ntincd -n $NETNAME -Dd 5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),"  -c, --config=DIR               Read configuration options from DIR.\n  -D, --no-detach                Don't fork and detach.\n  -d, --debug[=LEVEL]            Increase debug level or set it to LEVEL.\n  -k, --kill[=SIGNAL]            Attempt to kill a running tincd and exit.\n  -n, --net=NETNAME              Connect to net NETNAME.\n  -K, --generate-keys[=BITS]     Generate public/private RSA keypair.\n  -L, --mlock                    Lock tinc into main memory.\n      --logfile[=FILENAME]       Write log entries to a logfile.\n      --pidfile=FILENAME         Write PID to FILENAME.\n  -o, --option=[HOST.]KEY=VALUE  Set global/host configuration value.\n  -R, --chroot                   chroot to NET dir at startup.\n  -U, --user=USER                setuid to given USER at startup.\n      --help                     Display this help and exit.\n      --version                  Output version information and exit.\n")))}O.isMDXComponent=!0}}]);