"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[52827],{49613:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return k}});var r=t(59496);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var a=r.createContext({}),i=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(a.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,l=e.originalType,a=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=i(t),d=s,k=u["".concat(a,".").concat(d)]||u[d]||m[d]||l;return t?r.createElement(k,c(c({ref:n},p),{},{components:t})):r.createElement(k,c({ref:n},p))}));function k(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var l=t.length,c=new Array(l);c[0]=d;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o[u]="string"==typeof e?e:s,c[1]=o;for(var i=2;i<l;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72525:function(e,n,t){t.r(n),t.d(n,{assets:function(){return g},contentTitle:function(){return f},default:function(){return N},frontMatter:function(){return k},metadata:function(){return y},toc:function(){return v}});var r=t(49613),s=Object.defineProperty,l=Object.defineProperties,c=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,p=(e,n,t)=>n in e?s(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))a.call(n,t)&&p(e,t,n[t]);if(o)for(var t of o(n))i.call(n,t)&&p(e,t,n[t]);return e},m=(e,n)=>l(e,c(n)),d=(e,n)=>{var t={};for(var r in e)a.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&o)for(var r of o(e))n.indexOf(r)<0&&i.call(e,r)&&(t[r]=e[r]);return t};const k={title:"stunnel"},f="stunnel",y={unversionedId:"service/network/tunnel/stunnel",id:"service/network/tunnel/stunnel",title:"stunnel",description:"- TLS/SSL tunneling",source:"@site/../notes/service/network/tunnel/stunnel.md",sourceDirName:"service/network/tunnel",slug:"/service/network/tunnel/stunnel",permalink:"/notes/service/network/tunnel/stunnel",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/network/tunnel/stunnel.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1680070123,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{title:"stunnel"},sidebar:"docs",previous:{title:"localtunnel",permalink:"/notes/service/network/tunnel/localtunnel"},next:{title:"Tunnel Awesome",permalink:"/notes/service/network/tunnel/awesome"}},g={},v=[{value:"stunnel.conf",id:"stunnelconf",level:2},{value:"pgsql",id:"pgsql",level:2},{value:"cert",id:"cert",level:2},{value:"sni",id:"sni",level:2}],h={toc:v},b="wrapper";function N(e){var n=e,{components:t}=n,s=d(n,["components"]);return(0,r.kt)(b,m(u(u({},h),s),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"stunnel"}),"stunnel"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TLS/SSL tunneling"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"https://www.stunnel.org/static/stunnel.html"}),"https://www.stunnel.org/static/stunnel.html"))),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"apk add stunnel      # AlpineLinux\nbrew install stunnel # macOS\n\necho -n psk: > /etc/stunnel/psk.txt\nopenssl rand -base64 180 | tr -d '\\n' >> /etc/stunnel/psk.txt\n# sed --in-place '1s/^/psk:/' /etc/stunnel/psk.txt\n\necho -e '\\xef\\xbb\\xbf;BOM Here' > /etc/stunnel/stunnel.conf\n# \u670d\u52a1\u7aef\ncat << CONF >> /etc/stunnel/stunnel.conf\nsetuid  = stunnel\nsetgid  = stunnel\npid     = /run/stunnel/stunnel.pid\nsocket  = l:TCP_NODELAY=1\nsocket  = r:TCP_NODELAY=1\ndebug   = 5\n\n; \u914d\u7f6e\u5728\u670d\u52a1\u7aef\n[test server]\nclient      = no\naccept      = 18080\nconnect     = 8080\nciphers     = PSK\nPSKsecrets  = /etc/stunnel/psk.txt\n\n; \u914d\u7f6e\u5728\u5ba2\u6237\u7aef\n[test client]\nclient      = yes\naccept      = 8081\nconnect     = 127.0.0.1:18080 ; host \u4f1a\u53d8\nciphers     = PSK\nPSKsecrets  = /etc/stunnel/psk.txt\nCONF\n\nsocat -u tcp-l:8080,fork exec:/bin/cat # \u670d\u52a1\u7aef\necho Hello | nc 127.0.0.1 8080         # \u672c\u5730\u80fd\u901a\n\nmkdir -p /run/stunnel\nchown stunnel /run/stunnel\n\nstunnel\n\necho Hello | nc 127.0.0.1 8081 # Tunnel \u540e\u7684\u7aef\u53e3\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"/etc/stunnel/stunnel.conf")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u7c7b\u4f3c\u5de5\u5177")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"openssl s_client -connect server.com:443 -quiet\n\nsocat TCP-LISTEN:8888 OPENSSL:server.com:443,verify=0\n")),(0,r.kt)("p",null,"SSH over TLS"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"Host server.com\n    ProxyCommand openssl s_client -connect server.com:443 -quiet\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HAProxy \u4e5f\u53ef\u4ee5 terminate TLS \u7136\u540e\u8f6c\u53d1\u5230 TCP")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-haproxy"}),"backend secure_http\n    reqadd X-Forwarded-Proto:\\ https\n    rspadd Strict-Transport-Security:\\ max-age=31536000\n    mode http\n    option httplog\n    option forwardfor\n    server local_http_server 127.0.0.1:80\n\nbackend ssh\n    mode tcp\n    option tcplog\n    server ssh 127.0.0.1:22\n    timeout server 2h\n\nfrontend ssl\n    bind X.X.X.X:443 ssl crt /etc/ssl/private/certs.pem no-sslv3\n    mode tcp\n    option tcplog\n    tcp-request inspect-delay 5s\n    tcp-request content accept if HTTP\n\n    acl client_attempts_ssh payload(0,7) -m bin 5353482d322e30\n\n    use_backend ssh if !HTTP\n    use_backend ssh if client_attempts_ssh\n    use_backend secure_http if HTTP\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u53c2\u8003",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"https://blog.chmd.fr/ssh-over-ssl-episode-4-a-haproxy-based-configuration.html"}),"https://blog.chmd.fr/ssh-over-ssl-episode-4-a-haproxy-based-configuration.html"))))),(0,r.kt)("h2",u({},{id:"stunnelconf"}),"stunnel.conf"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"protocol",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"socks - \u76d1\u542c SOCKS - \u4f5c\u4e3a socks \u4ee3\u7406\u670d\u52a1"),(0,r.kt)("li",{parentName:"ul"},"connect - HTTP 1.1 CONNECT - \u53ea\u80fd client \u6a21\u5f0f"),(0,r.kt)("li",{parentName:"ul"},"cifs, capwin, capwinctrl, connect, imap, ldap, nntp, pgsql, pop3, proxy, smtp, socks"))),(0,r.kt)("li",{parentName:"ul"},"verify",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"1 - prefer"),(0,r.kt)("li",{parentName:"ul"},"2 - CA"),(0,r.kt)("li",{parentName:"ul"},"3 - CA+Cert"))),(0,r.kt)("li",{parentName:"ul"},"client",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"yes - \u8fdc\u7a0b\u670d\u52a1\u4f7f\u7528 TLS"))),(0,r.kt)("li",{parentName:"ul"},"connect - \u53ef\u914d\u7f6e\u591a\u4e2a - round-robin")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-ini"}),"foreground=no ; yes, quite\nlog=append ; overwrite\n; output=\n; pid=\n; service= ; inetd\nsyslog=yes\n\n; chroot=\n; compression= ; deflate, zlib\ndebug= ; 1-7\n; EGE= ; Entropy Gathering Daemon\nengine=auto\n\n[SERVICE NAME]\nclient=no ; yes\n; \u76d1\u542c\u7aef\u53e3\n; server - \u670d\u52a1\u7aef\u534f\u8bae\n; client - \u901a\u9053\u540e\u7684\u534f\u8bae\naccept=\n; \u8fde\u63a5\u7aef\u53e3\n; server - \u4e0a\u6e38\n; client - \u670d\u52a1\u7aef\nconnect=\n\nexec= ; inetd-type program\nexecArgs=\nretry=no ; connect+exec\npty= ; yes, no\n\nfailover=prio; rr\n\nPSKidentity= ; psk client\nPSKsecrets= ; IDENTITY:KEY\n\n; cifs, capwin, capwinctrl, connect, imap, ldap, nntp, pgsql, pop3, proxy, smtp, socks\nprotocol=\nprotocolAuthentication=\nprotocolDomain=\nprotocolHeader=\nprotocolHost=\nprotocolPassword=\nprotocolUsername=\n\nredirect=\nrenegotiation=yes\n\nreset=yes ; TCP RST\n\nident= ; USERNAME\ninclude= ; DIR\nconfig= ; openssl config\nCApath=\nCAfile=\ncert=\nkey=\n; server - \u5339\u914d\u7684\u540d\u5b57\n; client - \u5b9a\u4e49\u540d\u5b57\nsni=\nrequireCert=no\ncheckEmail=\ncheckHots=\ncheckIP=\ncipgers=\nciphersuites=\nCRLpath=\nCRLfile=\ncurves=\nlogID=\ndebug=\ndelay=no ; delay DNS lookup for connect\nengineId=\nengineNum=\nlibwrap=no ; /etc/hosts.allow, /etc/hosts.deny\nlocal=\nsslVersion=\nsslVersionMax=\nsslVersionMin=\nstack=\n\nOCSP=\nOCSPaia=\nOCSPflag=\nOCSPnonce=\noptions= ; SSL Options\n\nsecurityLevel=\n\nsetgid=\nsetuid=\n\nsessionCacheSize=\nsessionCacheTimeout=\nsessionResume=yes\nsessiond= # TLS cache server\n\nsocket=\nticketKeySecret=\nticketMacSecret=\n\nTIMEOUTbusy=\nTIMEOUTclose=\nTIMEOUTconnect=\nTIMEOUTidle=\n\ntransparent= ; none | source | destination | both\n\nverify=\nverifyChain=\nverifyPeer=no\n")),(0,r.kt)("h2",u({},{id:"pgsql"}),"pgsql"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-ini"}),"[pg]\nclient = yes\nprotocol = pgsql\naccept = 0.0.0.0:5432\nconnect = pg-b:15432\noptions = NO_TICKET\nretry = yes\n")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-sql"}),"create extension sslinfo();\nselect ssl_is_used()\n")),(0,r.kt)("h2",u({},{id:"cert"}),"cert"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"# cert \u548c key \u4e5f\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\nopenssl req -new -days 365 -nodes -x509 -out cert.pem -keyout key.pem\n\ncat key.pem cert.pem >> /etc/stunnel/stunnel.pem\n")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-ini"}),"cert=cert.pem\nkey=key.pem\nCAfile=cert.pem\nverify=3\nclient=no\n")),(0,r.kt)("h2",u({},{id:"sni"}),"sni"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"openssl req -new -days 365 -nodes -x509 -out cert.pem -keyout key.pem\n\nopenssl genrsa -out c1.key 1024\nopenssl req -new -key c1.key -out c1.csr\n\nopenssl ca -extensions v3_ca -days 365 -out c1.cer -policy policy_anything -in c1.csr\n")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-ini"}),"[virtual]\n; \u65e0 SNI \u65f6\nwas not correct\naccept = 443\ncert = /usr/local/etc/stunnel/stunnel.pem\nexec = /usr/local/bin/hello\n\n[server s1]\nsni = virtual:*.example.com\ncert = /usr/local/etc/stunnel/public_cert.pem\nconnect = 10.10.10.11:80\n\n[server s2]\nsni = virtual:secret.net\ncert = /usr/local/etc/stunnel/secret_cert.pem\nconnect = localhost:888\nverifyPeer = yes\nCAfile = /usr/local/etc/stunnel/allowed-clients.pem\n\n\n[cleint]\nclient = yes\nsni = c1.example.com\naccept =  127.0.0.1:80\nconnect = 10.10.10.12:443\ncert = stunnel.pem\nverifyPeer = yes\nCAfile = sni_certs.pem\n")))}N.isMDXComponent=!0}}]);