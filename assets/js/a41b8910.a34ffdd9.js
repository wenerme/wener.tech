"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[57331],{49613:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(59496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),f=c(t),m=o,b=f["".concat(i,".").concat(m)]||f[m]||p[m]||s;return t?r.createElement(b,a(a({ref:n},l),{},{components:t})):r.createElement(b,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=f;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var c=2;c<s;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},70836:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return m},default:function(){return O},frontMatter:function(){return f},metadata:function(){return b},toc:function(){return v}});var r=t(49613),o=Object.defineProperty,s=Object.defineProperties,a=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,l=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))i.call(n,t)&&l(e,t,n[t]);if(u)for(var t of u(n))c.call(n,t)&&l(e,t,n[t]);return e};const f={tags:["Configuration"]},m="NATS Conf",b={unversionedId:"queue/nats/nats-conf",id:"queue/nats/nats-conf",title:"NATS Conf",description:"nats-server.conf",source:"@site/../notes/queue/nats/nats-conf.md",sourceDirName:"queue/nats",slug:"/queue/nats/conf",permalink:"/notes/queue/nats/conf",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/queue/nats/nats-conf.md",tags:[{label:"Configuration",permalink:"/notes/tags/configuration"}],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1666510159,formattedLastUpdatedAt:"Oct 23, 2022",frontMatter:{tags:["Configuration"]},sidebar:"docs",previous:{title:"Client",permalink:"/notes/queue/nats/client"},next:{title:"NATS FAQ",permalink:"/notes/queue/nats/faq"}},d={},v=[{value:"nats-server.conf",id:"nats-serverconf",level:2},{value:"Auth",id:"auth",level:2}],y={toc:v};function O(e){var n,t=e,{components:o}=t,l=((e,n)=>{var t={};for(var r in e)i.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&u)for(var r of u(e))n.indexOf(r)<0&&c.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=p(p({},y),l),s(n,a({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("h1",p({},{id:"nats-conf"}),"NATS Conf"),(0,r.kt)("h2",p({},{id:"nats-serverconf"}),"nats-server.conf"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-conf"}),"# Client port of 4222 on all interfaces\nport: 4222\n\n# HTTP monitoring port\nmonitor_port: 8222\n\n# NSC \u751f\u6210\u7684 Operator JWT\noperator: $HOME/.nsc/nats/O/O.jwt\n# Account Server\nresolver: URL(http://localhost:9090/jwt/v1/accounts/)\n\n# This is for clustering multiple servers together.\ncluster {\n\n  # Route connections to be received on any interface on port 6222\n  port: 6222\n\n  # Routes are protected, so need to use them with --routes flag\n  # e.g. --routes=nats-route://ruser:T0pS3cr3t@otherdockerhost:6222\n  authorization {\n    user: ruser\n    password: T0pS3cr3t\n    timeout: 2\n  }\n\n  # Routes are actively solicited and connected to from this server.\n  # This Docker image has none by default, but you can pass a\n  # flag to the gnatsd docker image to create one to an existing server.\n  routes = []\n}\n")),(0,r.kt)("h2",p({},{id:"auth"}),"Auth"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"nats \u901a\u8fc7 account \u5b9e\u73b0\u79df\u6237\u9694\u79bb"),(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528 account \u9700\u8981\u8bbe\u7f6e auth"),(0,r.kt)("li",{parentName:"ul"},"\u8ba4\u8bc1\u65b9\u5f0f",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"token - \u53ef\u4ee5\u914d\u7f6e\u660e\u6587\u6216 bcrypt \u52a0\u5bc6\u7684 token"),(0,r.kt)("li",{parentName:"ul"},"user+password - \u5bc6\u7801\u652f\u6301 bcrypt \u52a0\u5bc6"),(0,r.kt)("li",{parentName:"ul"},"tls"),(0,r.kt)("li",{parentName:"ul"},"nkey"))),(0,r.kt)("li",{parentName:"ul"},"\u6388\u6743",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"publish"),(0,r.kt)("li",{parentName:"ul"},"subscribe"),(0,r.kt)("li",{parentName:"ul"},"allow_responses - max,expires"))),(0,r.kt)("li",{parentName:"ul"},"\u53c2\u8003",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://docs.nats.io/running-a-nats-service/configuration/securing_nats/auth_intro/jwt/resolver"}),"Account lookup using Resolver"))))),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-hcl"}),'authorization {\n  default_permissions = {\n    publish = "SANDBOX.*"\n    subscribe = ["PUBLIC.>", "_INBOX.>"]\n  }\n  ADMIN = {\n    publish = ">"\n    subscribe = ">"\n  }\n  REQUESTOR = {\n    publish = ["req.a", "req.b"]\n    subscribe = "_INBOX.>"\n  }\n  RESPONDER = {\n    subscribe = ["req.a", "req.b"]\n    publish = "_INBOX.>"\n  }\n  users = [\n    {user: admin,   password: $ADMIN_PASS, permissions: $ADMIN}\n    {user: client,  password: $CLIENT_PASS, permissions: $REQUESTOR}\n    {user: service,  password: $SERVICE_PASS, permissions: $RESPONDER}\n    {user: other, password: $OTHER_PASS}\n    {\n      user: test\n      password: test\n      permissions: {\n          publish: {\n              deny: ">"\n          },\n          subscribe: {\n              allow: "client.>"\n          }\n      }\n    }\n    { user: b, password: b, permissions: {subscribe: "q", allow_responses: true } },\n    { user: c, password: c, permissions: {subscribe: "q", allow_responses: { max: 5, expires: "1m" } } }\n  ]\n}\n\naccounts: {\n  A: {\n    users: [\n      {user: a, password: a}\n    ]\n    exports: [\n      {stream: puba.>}\n      {service: pubq.>}\n      {stream: b.>, accounts: [B]}\n      {service: q.b, accounts: [B]}\n    ]\n  },\n  B: {\n    users: [\n      {user: b, password: b}\n    ]\n    imports: [\n      {stream: {account: A, subject: b.>}}\n      {service: {account: A, subject: q.b}}\n    ]\n  },\n  C: {\n    users: [\n      {user: c, password: c}\n    ]\n    imports: [\n      {stream: {account: A, subject: puba.>}, prefix: from_a}\n      {service: {account: A, subject: pubq.C}, to: Q}\n    ]\n  }\n}\nno_auth_user: a\n')))}O.isMDXComponent=!0}}]);