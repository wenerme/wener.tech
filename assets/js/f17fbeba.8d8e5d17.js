"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[99655],{49613:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return b}});var a=r(59496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),b=n,m=d["".concat(s,".").concat(b)]||d[b]||p[b]||l;return r?a.createElement(m,i(i({ref:t},u),{},{components:r})):a.createElement(m,i({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var c=2;c<l;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},74020:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=r(96600),n=r(27279),l=(r(59496),r(49613)),i=["components"],o={title:"Bazel FAQ",tags:["FAQ"]},s="Bazel FAQ",c={unversionedId:"dev/build/bazel/bazel-faq",id:"dev/build/bazel/bazel-faq",title:"Bazel FAQ",description:"Central cache for external repositories",source:"@site/../notes/dev/build/bazel/bazel-faq.md",sourceDirName:"dev/build/bazel",slug:"/dev/build/bazel/bazel-faq",permalink:"/notes/dev/build/bazel/bazel-faq",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/../notes/dev/build/bazel/bazel-faq.md",tags:[{label:"FAQ",permalink:"/notes/tags/faq"}],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1663838677,formattedLastUpdatedAt:"Sep 22, 2022",frontMatter:{title:"Bazel FAQ",tags:["FAQ"]},sidebar:"docs",previous:{title:"Bazel Container",permalink:"/notes/dev/build/bazel/bazel-container"},next:{title:"Brazel Go",permalink:"/notes/dev/build/bazel/bazel-go"}},u={},p=[{value:"Central cache for external repositories",id:"central-cache-for-external-repositories",level:2},{value:"git add",id:"git-add",level:2},{value:"Bazel4 on AlpineLinux",id:"bazel4-on-alpinelinux",level:2},{value:"gcc: fatal error: cannot execute &#39;cc1plus&#39;: execvp: No such file or directory",id:"gcc-fatal-error-cannot-execute-cc1plus-execvp-no-such-file-or-directory",level:2},{value:"/usr/bin/bazel-real: <code>_ZSt28__throw_bad_array_new_lengthv</code>: symbol not found",id:"usrbinbazel-real-_zst28__throw_bad_array_new_lengthv-symbol-not-found",level:2},{value:"glob: recursive wildcard must be its own segment",id:"glob-recursive-wildcard-must-be-its-own-segment",level:2}],d={toc:p};function b(e){var t=e.components,r=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"bazel-faq"},"Bazel FAQ"),(0,l.kt)("h2",{id:"central-cache-for-external-repositories"},"Central cache for external repositories"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"repository_cache - ",(0,l.kt)("a",{parentName:"li",href:"https://docs.bazel.build/versions/main/command-line-reference.html#flag--repository_cache"},"https://docs.bazel.build/versions/main/command-line-reference.html#flag--repository_cache"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"~/.cache/bazel/_bazel_$USER/cache/repos/v1/")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/private/var/tmp/_bazel_$USER/cache/repos/v1/content_addressable/sha256/")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.bazel.build/versions/main/guide.html#repository-cache"},"https://docs.bazel.build/versions/main/guide.html#repository-cache")),(0,l.kt)("li",{parentName:"ul"},"experimental_repository_cache_hardlinks"),(0,l.kt)("li",{parentName:"ul"},"experimental_repository_cache_urls_as_default_canonical_id")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"du -sh /private/var/tmp/_bazel_$USER/cache/repos/v1/content_addressable/sha256\n")),(0,l.kt)("h2",{id:"git-add"},"git add"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git add --ignore-errors '**/BUILD.bazel' WORKSPACE deps.bzl BUILD.bazel\n")),(0,l.kt)("h2",{id:"bazel4-on-alpinelinux"},"Bazel4 on AlpineLinux"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# ALpineLinux 3.15\napk add openjdk17-jdk bazel4 -X https://mirrors.sjtug.sjtu.edu.cn/alpine/edge/testing\n\n# AlpineLinux Bazel \u73af\u5883\napk add xz python3 coreutils tar patch diffutils gcc g++\nln -s /usr/bin/python3 /usr/bin/python\n\n# ALpineLinux <= 3.15\napk upgrade g++ libstdc++ -X https://mirrors.sjtug.sjtu.edu.cn/alpine/edge/main\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bazel \u5b98\u65b9\u6784\u5efa\u7684\u4e0d\u652f\u6301 musl",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Using standalone binary on Alpine ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/bazelbuild/bazel/issues/5891"},"#5891")),(0,l.kt)("li",{parentName:"ul"},"musl support in CI ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/bazelbuild/continuous-integration/issues/1190"},"#1190")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/testing/bazel4/APKBUILD"},"https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/testing/bazel4/APKBUILD"))))),(0,l.kt)("h2",{id:"gcc-fatal-error-cannot-execute-cc1plus-execvp-no-such-file-or-directory"},"gcc: fatal error: cannot execute 'cc1plus': execvp: No such file or directory"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"apk add g++\n")),(0,l.kt)("h2",{id:"usrbinbazel-real-_zst28__throw_bad_array_new_lengthv-symbol-not-found"},"/usr/bin/bazel-real: ",(0,l.kt)("inlineCode",{parentName:"h2"},"_ZSt28__throw_bad_array_new_lengthv"),": symbol not found"),(0,l.kt)("p",null,"install bazel from edge testing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# sync libstdc++ version\napk upgrade libstdc++ -X https://mirrors.sjtug.sjtu.edu.cn/alpine/edge/main\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ldd /usr/bin/bazel-real\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    /lib/ld-musl-x86_64.so.1 (0x7f8198234000)\n    libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x7f8197d6a000)\n    libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x7f8197d50000)\n    libc.musl-x86_64.so.1 => /lib/ld-musl-x86_64.so.1 (0x7f8198234000)\nError relocating /usr/bin/bazel-real: _ZSt28__throw_bad_array_new_lengthv: symbol not found\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Missing\nobjdump -T /usr/lib/libstdc++.so.6 | grep throw_bad_array\n")),(0,l.kt)("h2",{id:"glob-recursive-wildcard-must-be-its-own-segment"},"glob: recursive wildcard must be its own segment"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'glob("src/**.c")')," -> ",(0,l.kt)("inlineCode",{parentName:"li"},'glob("src/**/*.c")'))))}b.isMDXComponent=!0}}]);