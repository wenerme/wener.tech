"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[4480],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),u=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(n),c=a,h=p["".concat(m,".").concat(c)]||p[c]||d[c]||l;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=p;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},31074:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return m},metadata:function(){return u},assets:function(){return s},toc:function(){return d},default:function(){return c}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={title:"Go Redis module",slug:"go-rm",date:new Date("2016-08-09T00:00:00.000Z"),tags:["\u9879\u76ee","Golang","Redis"],baseUrl:"https://github.com/wenerme/go-rm/tree/master/"},m=void 0,u={permalink:"/story/go-rm",editUrl:"https://github.com/wenerme/wener/edit/master/story/project/go-rm.md",source:"@site/story/project/go-rm.md",title:"Go Redis module",description:"Writing Redis Module in Golang.",date:"2016-08-09T00:00:00.000Z",formattedDate:"August 9, 2016",tags:[{label:"\u9879\u76ee",permalink:"/story/tags/\u9879\u76ee"},{label:"Golang",permalink:"/story/tags/golang"},{label:"Redis",permalink:"/story/tags/redis"}],readingTime:3.365,truncated:!0,authors:[],prevItem:{title:"\u5206\u5e03\u5f0f\u67b6\u6784\u624b\u8bb0",permalink:"/story/learning-dist-arch"},nextItem:{title:"Play Titans using shell",permalink:"/story/2016/2016-08-06-tap-titans"}},s={authorsImageUrls:[]},d=[{value:"Modules",id:"modules",children:[]},{value:"Demo",id:"demo",children:[]},{value:"How to write a module",id:"how-to-write-a-module",children:[]},{value:"Fantasy",id:"fantasy",children:[]},{value:"Pitfall",id:"pitfall",children:[]},{value:"TODO",id:"todo",children:[]}],p={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Writing Redis Module in Golang."),(0,l.kt)("p",null,"go-rm will let you write redis module in golang."),(0,l.kt)("p",null,"Read in | ",(0,l.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/wenerme/go-rm/master/README-zh_CN.md"},"\u4e2d\u6587")," | ",(0,l.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/wenerme/go-rm/master/README.md"},"English")," | ",(0,l.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/wenerme/go-rm/master/README-es.md"},"Spanish")),(0,l.kt)("h2",{id:"modules"},"Modules"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/redismodule"},"redismodule"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/redismodule/rxhash"},"rxhash"))))),(0,l.kt)("h2",{id:"demo"},"Demo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Ensure you installed the newest redis\n# for example by using brew you can\n# brew reinstall redis --HEAD\n\n# Build redis module\ngo build -v -buildmode=c-shared github.com/redismodule/rxhash/cmd/rxhash\n\n# Start redis-server and load our module with debug log\nredis-server --loadmodule rxhash --loglevel debug\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Connect to out redis-server")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Test hgetset\nredis-cli hset a a 1\n#> (integer) 1\nredis-cli hgetset a a 2\n#> "1"\nredis-cli hget a a\n#> "2"\n# Return nil if field not exists\nredis-cli hgetset a b 2\n#> (nil)\nredis-cli hgetset a b 3\n#> "2"\n')),(0,l.kt)("p",null,"Wow, it works, now you can distribute this redis module to you friends. :P"),(0,l.kt)("h2",{id:"how-to-write-a-module"},"How to write a module"),(0,l.kt)("p",null,"Implement a redis module is as easy as you write a cli app in go, this is all you need to implement above command."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "github.com/wenerme/go-rm/rm"\n\nfunc main() {\n    // In case someone try to run this\n    rm.Run()\n}\n\nfunc init() {\n    rm.Mod = CreateMyMod()\n}\nfunc CreateMyMod() *rm.Module {\n    mod := rm.NewMod()\n    mod.Name = "hashex"\n    mod.Version = 1\n    mod.Commands = []rm.Command{CreateCommand_HGETSET()}\n    return mod\n}\nfunc CreateCommand_HGETSET() rm.Command {\n    return rm.Command{\n        Usage: "HGETSET key field value",\n        Desc: `Sets the \'field\' in Hash \'key\' to \'value\' and returns the previous value, if any.\nReply: String, the previous value or NULL if \'field\' didn\'t exist. `,\n        Name:   "hgetset",\n        Flags:  "write fast deny-oom",\n        FirstKey:1, LastKey:1, KeyStep:1,\n        Action: func(cmd rm.CmdContext) int {\n            ctx, args := cmd.Ctx, cmd.Args\n            if len(cmd.Args) != 4 {\n                return ctx.WrongArity()\n            }\n            ctx.AutoMemory()\n            key, ok := openHashKey(ctx, args[1])\n            if !ok {\n                return rm.ERR\n            }\n            // get the current value of the hash element\n            var val rm.String;\n            key.HashGet(rm.HASH_NONE, cmd.Args[2], (*uintptr)(&val))\n            // set the element to the new value\n            key.HashSet(rm.HASH_NONE, cmd.Args[2], cmd.Args[3])\n            if val.IsNull() {\n                ctx.ReplyWithNull()\n            } else {\n                ctx.ReplyWithString(val)\n            }\n            return rm.OK\n        },\n    }\n}\n// open the key and make sure it is indeed a Hash and not empty\nfunc openHashKey(ctx rm.Ctx, k rm.String) (rm.Key, bool) {\n    key := ctx.OpenKey(k, rm.READ | rm.WRITE)\n    if key.KeyType() != rm.KEYTYPE_EMPTY && key.KeyType() != rm.KEYTYPE_HASH {\n        ctx.ReplyWithError(rm.ERRORMSG_WRONGTYPE)\n        return rm.Key(0), false\n    }\n    return key, true\n}\n')),(0,l.kt)("h2",{id:"fantasy"},"Fantasy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A module management module, supplies",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"mod.search",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Search module from repository(github?)"),(0,l.kt)("li",{parentName:"ul"},"Repository structure like this",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"/namespace\n    /module-name\n        /bin\n            /darwin_amd64\n                module-name.so\n                module-name.sha\n            /linux_amd64\n        module-name.go     \n"))))),(0,l.kt)("li",{parentName:"ul"},"mod.get",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Download module to ~/.redismodule"),(0,l.kt)("li",{parentName:"ul"},"Because module is write in go, so we can build for almost any platform"),(0,l.kt)("li",{parentName:"ul"},"We can use tag/commit to version the binary, so we can download the old version too"))),(0,l.kt)("li",{parentName:"ul"},"mod.install",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Install downloaded module by calling redis command"))),(0,l.kt)("li",{parentName:"ul"},"..."))),(0,l.kt)("li",{parentName:"ul"},"A cluster management module",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Easy to create/manage/monitor redis3 cluster"))),(0,l.kt)("li",{parentName:"ul"},"A json data type to demonstration how to add new data type in redis.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"json.fmt key template"),(0,l.kt)("li",{parentName:"ul"},"json.path key path ","[","pretty]"),(0,l.kt)("li",{parentName:"ul"},"json.get key ","[","pretty]"),(0,l.kt)("li",{parentName:"ul"},"json.set key value",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"this will validate the json format")))))),(0,l.kt)("h2",{id:"pitfall"},"Pitfall"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"C can not call Go function, so every callback is pre-generated",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"200 commands at most"),(0,l.kt)("li",{parentName:"ul"},"5 data type at most"),(0,l.kt)("li",{parentName:"ul"},"limits are easy to change, just need a proper max value"))),(0,l.kt)("li",{parentName:"ul"},"Go can not call var_args, function call is pre-generated",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"HashSet/HashGet can accept 20 args at most"),(0,l.kt)("li",{parentName:"ul"},"limits are easy to change, just need a proper max value"))),(0,l.kt)("li",{parentName:"ul"},"Don't know what happens when unload a golang shared module",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Single module"),(0,l.kt)("li",{parentName:"ul"},"Multi module",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Is there runtime are shared ?"))))),(0,l.kt)("li",{parentName:"ul"},"Module write in go can not report it's memory usage to redis, max memory limits is useless"),(0,l.kt)("li",{parentName:"ul"},"If a module write in go also include a third party write in other language, the memory usage is unknown"),(0,l.kt)("li",{parentName:"ul"},"Module can only accept command, seems there is no way to call redis initiative.")),(0,l.kt)("h2",{id:"todo"},"TODO"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find a proper limits for data types and var_args")))}c.isMDXComponent=!0}}]);