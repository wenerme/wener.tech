"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[7012],{49613:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(59496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=u(t),d=o,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||a;return t?r.createElement(m,c(c({ref:n},s),{},{components:t})):r.createElement(m,c({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},43140:function(e,n,t){t.r(n),t.d(n,{assets:function(){return b},contentTitle:function(){return d},default:function(){return O},frontMatter:function(){return f},metadata:function(){return m},toc:function(){return y}});var r=t(49613),o=Object.defineProperty,a=Object.defineProperties,c=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&s(e,t,n[t]);if(i)for(var t of i(n))u.call(n,t)&&s(e,t,n[t]);return e};const f={title:"C Build"},d="C Build",m={unversionedId:"languages/c/c-build",id:"languages/c/c-build",title:"C Build",description:"\u7f16\u8bd1\u8fc7\u7a0b",source:"@site/../notes/languages/c/c-build.md",sourceDirName:"languages/c",slug:"/languages/c/c-build",permalink:"/notes/languages/c/c-build",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/languages/c/c-build.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1625032306,formattedLastUpdatedAt:"Jun 30, 2021",frontMatter:{title:"C Build"},sidebar:"docs",previous:{title:"C Awesome",permalink:"/notes/languages/c/c-awesome"},next:{title:"C Cookbook",permalink:"/notes/languages/c/c-cookbook"}},b={},y=[{value:"\u7f16\u8bd1\u8fc7\u7a0b",id:"\u7f16\u8bd1\u8fc7\u7a0b",level:2}],g={toc:y};function O(e){var n,t=e,{components:o}=t,s=((e,n)=>{var t={};for(var r in e)l.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&i)for(var r of i(e))n.indexOf(r)<0&&u.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=p(p({},g),s),a(n,c({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("h1",p({},{id:"c-build"}),"C Build"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"gcc main.c -static\n\n\necho 'int main(){}' > test.c\ngcc -o test test.c\nfile test\n\nCC=arm-linux-gnueabi-gcc\necho 'int main(){}' > test.c\n# ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a839e1b10daec5d9c348eef8854bb271f8097d34, not stripped\n# \u6ce8\u610f GNU/Linux 3.2.0\n$CC -o test test.c\nfile test\n")),(0,r.kt)("h2",p({},{id:"\u7f16\u8bd1\u8fc7\u7a0b"}),"\u7f16\u8bd1\u8fc7\u7a0b"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),"          |\n          |----\x3e  Input is Source file(.c)\n          |\n          V\n+=================+\n|                 |\n| C Preprocessor  |\n|                 |\n+=================+\n          |\n          | ---\x3e Pure C file ( comd:cc -E <file.name> )\n          |\n          V\n+=================+\n|                 |\n| Lexical Analyzer|\n|                 |\n+-----------------+\n|                 |\n| Syntax Analyzer |\n|                 |\n+-----------------+\n|                 |\n| Semantic Analyze|\n|                 |\n+-----------------+\n|                 |\n| Pre Optimization|\n|                 |\n+-----------------+\n|                 |\n| Code generation |\n|                 |\n+-----------------+\n|                 |\n| Post Optimize   |\n|                 |\n+=================+\n          |\n          |---\x3e  Assembly code (comd: cc -S <file.name> )\n          |\n          V\n+=================+\n|                 |\n|   Assembler     |\n|                 |\n+=================+\n          |\n          |---\x3e  Object file (.obj) (comd: cc -c <file.name>)\n          |\n          V\n+=================+\n|     Linker      |\n|      and        |\n|     loader      |\n+=================+\n          |\n          |---\x3e  Executable (.Exe/a.out) (com:cc <file.name> )\n          |\n          V\nExecutable file(a.out)\n")))}O.isMDXComponent=!0}}]);