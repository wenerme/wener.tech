"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[683],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return p}});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=a.createContext({}),m=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=m(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),f=m(t),p=s,d=f["".concat(c,".").concat(p)]||f[p]||u[p]||r;return t?a.createElement(d,o(o({ref:n},l),{},{components:t})):a.createElement(d,o({ref:n},l))}));function p(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},46840:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return l},default:function(){return f}});var a=t(87462),s=t(63366),r=(t(67294),t(3905)),o=["components"],i={title:"nats"},c=void 0,m={unversionedId:"queue/nats/nats-cli",id:"queue/nats/nats-cli",title:"nats",description:"- nats-io/natscli",source:"@site/notes/queue/nats/nats-cli.md",sourceDirName:"queue/nats",slug:"/queue/nats/nats-cli",permalink:"/notes/queue/nats/nats-cli",editUrl:"https://github.com/wenerme/wener/edit/master/notes/queue/nats/nats-cli.md",tags:[],version:"current",frontMatter:{title:"nats"},sidebar:"docs",previous:{title:"NATS",permalink:"/notes/queue/nats/"},next:{title:"NATS FAQ",permalink:"/notes/queue/nats/nats-faq"}},l=[],u={toc:l};function f(e){var n=e.components,t=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/nats-io/natscli"},"nats-io/natscli")),(0,r.kt)("li",{parentName:"ul"},"~/.config/nats/",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"context.txt - \u5f53\u524d\u4e0a\u4e0b\u6587")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# macOS\nbrew tap nats-io/nats-tools\nbrew install nats-io/nats-tools/nats\n\n# cheatsheet\nnats cheat --sections\nnats cheat\n\n# \u4e0a\u4e0b\u6587\u7ba1\u7406\nnats context add local --description "Localhost"\nnats context add nats --server demo.nats.io:4222 --description "NATS Demo" --select\n\nnats context ls           # \u6240\u6709\u4e0a\u4e0b\u6587\nnats context select local # \u5207\u6362\u4e0a\u4e0b\u6587 - \u4e5f\u53ef\u4ee5 --context=CONTEXT\n\nnats account info         # \u5f53\u524d\u8d26\u53f7\u4fe1\u606f\nnats rtt                  # \u4e0e\u670d\u52a1\u5668 rt - \u76f8\u5f53\u4e8e PING \u4f5c\u7528\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="context/local.json"',title:'"context/local.json"'},'{\n  "description": "Localhost",\n  "url": "nats://127.0.0.1:4222",\n  "user": "",\n  "password": "",\n  "creds": "",\n  "nkey": "",\n  "cert": "",\n  "key": "",\n  "ca": "",\n  "nsc": "",\n  "jetstream_api_prefix": "",\n  "jetstream_event_prefix": ""\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'usage: nats [<flags>] <command> [<args> ...]\n\nNATS Utility\n\nNATS Server and JetStream administration.\n\nSee \'nats cheat\' for a quick cheatsheet of commands\n\n\n\nFlags:\n  -h, --help                    Show context-sensitive help (also try --help-long and --help-man).\n      --version                 Show application version.\n  -s, --server=NATS_URL         NATS server urls\n      --user=NATS_USER          Username or Token\n      --password=NATS_PASSWORD  Password\n      --creds=NATS_CREDS        User credentials\n      --nkey=NATS_NKEY          User NKEY\n      --tlscert=NATS_CERT       TLS public certificate\n      --tlskey=NATS_KEY         TLS private key\n      --tlsca=NATS_CA           TLS certificate authority chain\n      --timeout=NATS_TIMEOUT    Time to wait on responses from NATS\n      --js-api-prefix=PREFIX    Subject prefix for access to JetStream API\n      --js-event-prefix=PREFIX  Subject prefix for access to JetStream Advisories\n      --context=CONTEXT         Configuration context\n      --trace                   Trace API interactions\n\nCommands:\n  help [<command>...]\n    Show help.\n\n  account info\n    Account information\n\n  backup [<flags>] <output>\n    JetStream configuration backup utility\n\n  bench [<flags>] <subject>\n    Benchmark utility\n\n  consumer add [<flags>] [<stream>] [<consumer>]\n    Creates a new Consumer\n\n  consumer copy [<flags>] <stream> <source> <destination>\n    Creates a new Consumer based on the configuration of another\n\n  consumer info [<flags>] [<stream>] [<consumer>]\n    Consumer information\n\n  consumer ls [<flags>] [<stream>]\n    List known Consumers\n\n  consumer next [<flags>] <stream> <consumer>\n    Retrieves messages from Pull Consumers without interactive prompts\n\n  consumer rm [<flags>] [<stream>] [<consumer>]\n    Removes a Consumer\n\n  consumer sub [<flags>] [<stream>] [<consumer>]\n    Retrieves messages from Consumers\n\n  consumer cluster step-down [<stream>] [<consumer>]\n    Force a new leader election by standing down the current leader\n\n  consumer report [<flags>] [<stream>]\n    Reports on Consmer statistics\n\n  context save [<flags>] <name>\n    Update or create a context\n\n  context edit <name>\n    Edit a context in your EDITOR\n\n  context ls\n    List known contexts\n\n  context rm [<flags>] <name>\n    Remove a context\n\n  context select [<name>]\n    Select the default context\n\n  context show [<flags>] [<name>]\n    Show the current or named context\n\n  context validate [<flags>] [<name>]\n    Validate one or all contexts\n\n  events [<flags>]\n    Show Advisories and Events\n\n  latency --server-b=SERVER-B [<flags>]\n    Perform latency tests between two NATS servers\n\n  pub [<flags>] <subject> [<body>]\n    Generic data publish utilty\n\n    Body and Header values of the messages may use Go templates to create unique messages.\n\n      nats pub test --count 10 "Message {{Count}} @ {{Time}}"\n\n    Multiple messages with random strings between 10 and 100 long:\n\n      nats pub test --count 10 "Message {{Count}}: {{ Random 10 100 }}"\n\n    Available template functions are:\n\n      Count            the message number\n      TimeStamp        RFC3339 format current time\n      Unix             seconds since 1970 in UTC\n      UnixNano         nano seconds since 1970 in UTC\n      Time             the current time\n      ID               an unique ID\n      Random(min, max) random string at least min long, at most max\n\n  request [<flags>] <subject> [<body>]\n    Generic data request utility\n\n    Body and Header values of the messages may use Go templates to create unique messages.\n\n      nats pub test --count 10 "Message {{Count}} @ {{Time}}"\n\n    Multiple messages with random strings between 10 and 100 long:\n\n      nats pub test --count 10 "Message {{Count}}: {{ Random 10 100 }}"\n\n    Available template functions are:\n\n      Count            the message number\n      TimeStamp        RFC3339 format current time\n      Unix             seconds since 1970 in UTC\n      UnixNano         nano seconds since 1970 in UTC\n      Time             the current time\n      ID               an unique ID\n      Random(min, max) random string at least min long, at most max\n\n  rtt [<flags>] [<iterations>]\n    Compute round-trip time to NATS server\n\n  reply [<flags>] <subject> [<body>]\n    Generic service reply utility\n\n    The "command" supports extracting some information from the subject the request came in on.\n\n    When the subject being listened on is "weather.>" a request on "weather.london" can extract the "london" part and\n    use it in the command string:\n\n      nats reply \'weather.>\' --command "curl -s wttr.in/{{1}}?format=3"\n\n    This will request the weather for london when invoked as:\n\n      nats request weather.london \'\'\n\n    The body and Header values of the messages may use Go templates to create unique messages.\n\n      nats reply test "Message {{Count}} @ {{Time}}"\n\n    Multiple messages with random strings between 10 and 100 long:\n\n      nats pub test --count 10 "Message {{Count}}: {{ Random 10 100 }}"\n\n    Available template functions are:\n\n      Count            the message number\n      TimeStamp        RFC3339 format current time\n      Unix             seconds since 1970 in UTC\n      UnixNano         nano seconds since 1970 in UTC\n      Time             the current time\n      ID               an unique ID\n      Random(min, max) random string at least min long, at most max\n\n  restore [<flags>] [<directory>]\n    Restores a backup of JetStream configuration\n\n  schema search [<flags>] [<pattern>]\n    Search schemas using a pattern\n\n  schema show [<flags>] <schema>\n    Show the contents of a schema\n\n  schema validate [<flags>] <schema> <file>\n    Validates a JSON file against a schema\n\n  server info [<server>]\n    Show information about a single server\n\n  server list [<flags>] [<expect>]\n    List known servers\n\n  server ping [<flags>] [<expect>]\n    Ping all servers\n\n  server report connections [<flags>] [<limit>]\n    Report on connections\n\n  server report accounts [<flags>] [<account>] [<limit>]\n    Report on account activity\n\n  server report jetstream [<flags>] [<limit>]\n    Report on JetStream activity\n\n  server request subscriptions [<flags>] [<wait>]\n    Show subscription information\n\n  server request variables [<wait>]\n    Show runtime variables\n\n  server request connections [<flags>] [<wait>]\n    Show connection details\n\n  server request routes [<flags>] [<wait>]\n    Show route details\n\n  server request gateways [<flags>] [<wait>] [<filter-name>]\n    Show gateway details\n\n  server request leafnodes [<flags>] [<wait>]\n    Show leafnode details\n\n  server request accounts [<flags>] [<wait>]\n    Show account details\n\n  server request jetstream [<flags>] [<wait>]\n    Show JetStream details\n\n  server raft step-down [<flags>]\n    Force a new leader election by standing down the current meta leader\n\n  server raft peer-remove [<flags>] [<name>]\n    Removes a server from a JetStream cluster\n\n  server passwd [<flags>]\n    Creates encrypted passwords for use in NATS Server\n\n  server check connection* [<flags>]\n    Checks basic server connection\n\n  server check stream --stream=STREAM --peer-expect=SERVERS [<flags>]\n    Checks the health of mirrored streams, streams with sources or clustered streams\n\n  server check meta --expect=SERVERS --lag-critical=OPS --seen-critical=DURATION\n    Check JetStream cluster state\n\n  stream add [<flags>] [<stream>]\n    Create a new Stream\n\n  stream edit [<flags>] [<stream>]\n    Edits an existing stream\n\n  stream info [<flags>] [<stream>]\n    Stream information\n\n  stream ls [<flags>]\n    List all known Streams\n\n  stream rm [<flags>] [<stream>]\n    Removes a Stream\n\n  stream purge [<flags>] [<stream>]\n    Purge a Stream without deleting it\n\n  stream copy [<flags>] <source> <destination>\n    Creates a new Stream based on the configuration of another\n\n  stream get [<flags>] [<stream>] [<id>]\n    Retrieves a specific message from a Stream\n\n  stream rmm [<flags>] [<stream>] [<id>]\n    Securely removes an individual message from a Stream\n\n  stream view [<flags>] [<stream>] [<size>]\n    View messages in a stream\n\n  stream report [<flags>]\n    Reports on Stream statistics\n\n  stream backup [<flags>] <stream> <target>\n    Creates a backup of a Stream over the NATS network\n\n  stream restore [<flags>] <stream> <file>\n    Restore a Stream over the NATS network\n\n  stream cluster step-down [<stream>]\n    Force a new leader election by standing down the current leader\n\n  stream cluster peer-remove [<stream>] [<peer>]\n    Removes a peer from the Stream cluster\n\n  stream template create [<flags>] [<stream>]\n    Creates a new Stream Template\n\n  stream template info [<flags>] [<template>]\n    Stream Template information\n\n  stream template ls [<flags>]\n    List all known Stream Templates\n\n  stream template rm [<flags>] [<template>]\n    Removes a Stream Template\n\n  sub [<flags>] [<subject>]\n    Generic subscription client\n\n  cheat [<flags>] [<section>]\n    Cheatsheets for the nats CLI\n\n    These cheatsheets are in a format compatible with the popular https://github.com/cheat/cheat command.\n')))}f.isMDXComponent=!0}}]);