"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[14775],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),g=a,m=d["".concat(i,".").concat(g)]||d[g]||p[g]||s;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83337:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(87462),a=n(63366),s=(n(67294),n(3905)),o=["components"],l={title:"PostgreSQL Tenant"},i=void 0,u={unversionedId:"db/relational/postgresql/postgresql-tenant",id:"db/relational/postgresql/postgresql-tenant",isDocsHomePage:!1,title:"PostgreSQL Tenant",description:"- System Administration Functions",source:"@site/notes/db/relational/postgresql/postgresql-tenant.md",sourceDirName:"db/relational/postgresql",slug:"/db/relational/postgresql/postgresql-tenant",permalink:"/notes/db/relational/postgresql/postgresql-tenant",editUrl:"https://github.com/wenerme/wener/edit/master/notes/db/relational/postgresql/postgresql-tenant.md",tags:[],version:"current",frontMatter:{title:"PostgreSQL Tenant"},sidebar:"docs",previous:{title:"Pg SQL \u5e38\u89c1\u95ee\u9898",permalink:"/notes/db/relational/postgresql/postgresql-sql-faq"},next:{title:"\u53ef\u66f4\u65b0\u89c6\u56fe",permalink:"/notes/db/relational/postgresql/postgresql-view"}},c=[{value:"generate_res_id",id:"generate_res_id",children:[]},{value:"generate_res_sid",id:"generate_res_sid",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions-admin.html"},"System Administration Functions")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/geckoboard/pgulid"},"geckoboard/pgulid"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Pure pgsql ULID")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- name, value, local\nselect set_config('tenant.id', 1000, true);\nset tenant.id = 1000;\n\n-- name, optional\nselect current_setting('tenant.id',true);\nshow tenant.id;\n")),(0,s.kt)("h2",{id:"generate_res_id"},"generate_res_id"),(0,s.kt)("p",null,"\u9488\u5bf9\u79df\u6237+\u8d44\u6e90\u751f\u6210\u552f\u4e00 ID"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- TENANT-RES-ULID\ncreate or replace function generate_res_id(name text) returns text\nas\n$$\nbegin\n    return concat(current_setting('tenant.id'), '-', name, '-', generate_ulid());\nend\n$$\n    language plpgsql\n    volatile;\n\nselect generate_res_id('user');\n")),(0,s.kt)("h2",{id:"generate_res_sid"},"generate_res_sid"),(0,s.kt)("p",null,"\u9488\u5bf9\u79df\u6237+\u8d44\u6e90\u751f\u6210\u552f\u4e00 \u5e8f\u5217 ID"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- track sequence\ncreate table system_resource_sequences\n(\n    id        serial,\n    tenant_id bigint,\n    resource  text,\n    value     bigint,\n    unique (tenant_id, resource)\n);\n\n-- generate_res_sid\ncreate or replace function generate_res_sid(res text)\n    returns bigint\nas\n$$\ninsert into system_resource_sequences(tenant_id, resource, value)\nvalues (1000, res, 1)\non conflict(tenant_id,resource) do update set value=system_resource_sequences.value + 1\nreturning value\n$$\n    language sql\n    volatile;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- test insert\ninsert into system_resource_sequences(tenant_id, resource, value)\nvalues (current_setting('tenant.id'), 'User', 1)\non conflict(tenant_id,resource) do update set value=system_resource_sequences.value + 1\nreturning value;\n\n-- test function\nselect generate_res_sid('User');\n")))}d.isMDXComponent=!0}}]);