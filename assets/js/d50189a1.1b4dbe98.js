"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[99614],{49613:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(59496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),o=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=o(e.components);return a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=o(t),d=r,N=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(N,l(l({ref:n},p),{},{components:t})):a.createElement(N,l({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=t[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},31070:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return m}});var a=t(96600),r=t(27279),i=(t(59496),t(49613)),l=["components"],s={title:"Crypto"},c="Crypto",o={unversionedId:"security/crypto",id:"security/crypto",title:"Crypto",description:"- Comparison of cryptography libraries",source:"@site/../notes/security/crypto.md",sourceDirName:"security",slug:"/security/crypto",permalink:"/notes/security/crypto",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/../notes/security/crypto.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1663838677,formattedLastUpdatedAt:"Sep 22, 2022",frontMatter:{title:"Crypto"},sidebar:"docs",previous:{title:"ACME",permalink:"/notes/security/acme-awesome"},next:{title:"Let's Encrypt",permalink:"/notes/security/letsencrypt"}},p={},m=[{value:"OpenSSL",id:"openssl",level:2},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:3}],u={toc:m};function d(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"crypto"},"Crypto"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Comparison_of_cryptography_libraries"},"Comparison of cryptography libraries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1405.0398.pdf"},"Symmetric Algorithm Survey: A Comparative Analysis")),(0,i.kt)("li",{parentName:"ul"},"\u975e\u5bf9\u79f0\u52a0\u5bc6 - Asymmetric",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"DH"),(0,i.kt)("li",{parentName:"ul"},"RSA"),(0,i.kt)("li",{parentName:"ul"},"SSL"),(0,i.kt)("li",{parentName:"ul"},"SSH"))),(0,i.kt)("li",{parentName:"ul"},"\u5bf9\u79f0\u52a0\u5bc6 - Symmetric",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"AES - Advanced Encryption Standard",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u53d6\u4ee3\u4e86 DES"))),(0,i.kt)("li",{parentName:"ul"},"Blow Fish - Drop-in replacement for DES or IDEA"),(0,i.kt)("li",{parentName:"ul"},"Rijndael"),(0,i.kt)("li",{parentName:"ul"},"DES - Data Encryption Standard"),(0,i.kt)("li",{parentName:"ul"},"3DES"),(0,i.kt)("li",{parentName:"ul"},"CAS"),(0,i.kt)("li",{parentName:"ul"},"RC6"),(0,i.kt)("li",{parentName:"ul"},"TEA"),(0,i.kt)("li",{parentName:"ul"},"Mars"),(0,i.kt)("li",{parentName:"ul"},"IDEA - International Data Encryption Algorithm"),(0,i.kt)("li",{parentName:"ul"},"Serpent"),(0,i.kt)("li",{parentName:"ul"},"Two Fish"),(0,i.kt)("li",{parentName:"ul"},"RC4 - Rivest Cipher 4"),(0,i.kt)("li",{parentName:"ul"},"RC5 - Rivest Cipher 5"),(0,i.kt)("li",{parentName:"ul"},"RC6 - Rivest Cipher 6"))),(0,i.kt)("li",{parentName:"ul"},"\u5bf9\u79f0\u52a0\u5bc6\u5206\u4e3a \u5757\u3001\u6d41 \u7b97\u6cd5"),(0,i.kt)("li",{parentName:"ul"},"TLS - Transport Layer Security"),(0,i.kt)("li",{parentName:"ul"},"SSL - Secure Sockets Layer",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"TLS \u524d\u4efb"))),(0,i.kt)("li",{parentName:"ul"},"csr - Certificate Signing Request"),(0,i.kt)("li",{parentName:"ul"},"crt - certificate",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"x509"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)"},"RSA"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://youtu.be/wXB-V_Keiu8"},"Public Key Cryptography: RSA Encryption Algorithm")))),(0,i.kt)("li",{parentName:"ul"},"DES - Data Encryption Standard",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5df2\u7ecf\u4e0d\u662f\u4e00\u79cd\u5b89\u5168\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u4e3b\u8981\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684 56 \u4f4d\u5bc6\u94a5\u8fc7\u77ed"))),(0,i.kt)("li",{parentName:"ul"},"DER"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/X.509"},"X.509")),(0,i.kt)("li",{parentName:"ul"},"PKI - Publick Key Infra"),(0,i.kt)("li",{parentName:"ul"},"rc2/rc4"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/PKCS"},"PKCS")," - Public Key Cryptography Standards"),(0,i.kt)("li",{parentName:"ul"},"ec - Elliptic Curves"),(0,i.kt)("li",{parentName:"ul"},".pem \u2013 Privacy-enhanced Electronic Mail",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Base64 encoded DER certificate, enclosed between "-----BEGIN CERTIFICATE-----" and "-----END CERTIFICATE-----"'))),(0,i.kt)("li",{parentName:"ul"},".cer, .crt, .der",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"usually in binary DER form, but Base64-encoded certificates are common too (see .pem above)"))),(0,i.kt)("li",{parentName:"ul"},".p7b, .p7c",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"PKCS#7 SignedData structure without data, just certificate(s) or CRL(s)"))),(0,i.kt)("li",{parentName:"ul"},".p12",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"PKCS#12, may contain certificate(s) (public) and private keys (password protected)"))),(0,i.kt)("li",{parentName:"ul"},".pfx",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"predecessor of PKCS#12 (usually contains data in PKCS#12 format, e.g., with PFX files generated in IIS)")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# \u4f7f\u7528 brew \u5b89\u88c5\u7684 openssl\n# \u6216\u8005 brew link openssl --force\nalias openssl=$(brew --prefix openssl)/bin/openssl\n\n")),(0,i.kt)("h2",{id:"openssl"},"OpenSSL"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manpages.html"},"manpages"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Standard commands\nasn1parse         ca                ciphers           cms\ncrl               crl2pkcs7         dgst              dh\ndhparam           dsa               dsaparam          ec\necparam           enc               engine            errstr\ngendh             gendsa            genpkey           genrsa\nnseq              ocsp              passwd            pkcs12\npkcs7             pkcs8             pkey              pkeyparam\npkeyutl           prime             rand              req\nrsa               rsautl            s_client          s_server\ns_time            sess_id           smime             speed\nspkac             srp               ts                verify\nversion           x509\n\nMessage Digest commands (see the `dgst' command for more details)\nmd4               md5               mdc2              rmd160\nsha               sha1\n\nCipher commands (see the `enc' command for more details)\naes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb\naes-256-cbc       aes-256-ecb       base64            bf\nbf-cbc            bf-cfb            bf-ecb            bf-ofb\ncamellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb\ncamellia-256-cbc  camellia-256-ecb  cast              cast-cbc\ncast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb\ndes               des-cbc           des-cfb           des-ecb\ndes-ede           des-ede-cbc       des-ede-cfb       des-ede-ofb\ndes-ede3          des-ede3-cbc      des-ede3-cfb      des-ede3-ofb\ndes-ofb           des3              desx              idea\nidea-cbc          idea-cfb          idea-ecb          idea-ofb\nrc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc\nrc2-cfb           rc2-ecb           rc2-ofb           rc4\nrc4-40            seed              seed-cbc          seed-cfb\nseed-ecb          seed-ofb          zlib\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# \u6d4b\u8bd5 sha1 \u901f\u5ea6\n# \u53ef\u7528\u4e8e\u6d4b\u8bd5\u673a\u5668\u6027\u80fd\nopenssl speed sha1\n\n# \u6d4b\u8bd5\u5b89\u88c5\u7684 OpenSSL \u662f\u5426\u652f\u6301 CPU \u52a0\u901f AES-NI\nopenssl speed aes-256-cbc\nopenssl speed -evp aes-256-cbc\n\n# \u521b\u5efa certificate request/unsigned key\n# ====================================\nDOMAIN=wener.me\n# \u540c\u65f6\u521b\u5efa key\nopenssl req -nodes -new -sha256 -keyout $DOMAIN.key.pem -out $DOMAIN.csr.pem\n# \u4f7f\u7528\u73b0\u6709\u79d8\u94a5\nopenssl req -nodes -new -sha256 -key $DOMAIN.key.pem -out $DOMAIN.csr.pem\n\n# \u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\n# SubjectAltName \u53ef\u4ee5\u4f7f\u5f97\u8bc1\u4e66\u7528\u4e8e\u591a\u4e2a\u57df\u540d\ncat > $DOMAIN.conf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = req_ext\n\n[req_distinguished_name]\ncountryName = Country Name (2 letter code)\ncountryName_default = US\nstateOrProvinceName = State or Province Name (full name)\nstateOrProvinceName_default = New York\nlocalityName = Locality Name (eg, city)\nlocalityName_default = New York City\norganizationalUnitName = Organizational Unit Name (eg, section)\ncommonName = Common Name\ncommonName_default = $DOMAIN\ncommonName_max = 64\n\n[req_ext]\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1   = $DOMAIN\nDNS.2   = www.$DOMAIN\nEOF\n# \u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u521b\u5efa\nopenssl req -nodes -new -sha256 -key $DOMAIN.key.pem -out $DOMAIN.csr.pem -config $DOMAIN.conf\n\n# \u663e\u793a\u79d8\u94a5\u6307\u7eb9\nopenssl x509 -subject -dates -fingerprint -in $DOMAIN.key.pem\n\n# \u751f\u6210 RSA key\nopenssl genrsa -out $DOMAIN.key.pem 4096\n# \u751f\u6210 EC key (using prime256v1 curve)\nopenssl ecparam -out $DOMAIN.key.pem -name prime256v1 -genkey\n\n# \u663e\u793a\u8bc1\u4e66\u4fe1\u606f\nopenssl req -text -noout -in $DOMAIN.csr.pem\nopenssl x509 -in $DOMAIN.crt.pem -noout -text\n\n# \u4e3a\u670d\u52a1\u751f\u6210 PEM\ncat $DOMAIN.key.pem $DOMAIN.crt.pem $DOMAIN.dhp.pem > $DOMAIN.pem\n\n# \u751f\u6210 PKCS12 \u6587\u4ef6\u683c\u5f0f\nopenssl pkcs12 -export -in $DOMAIN.crt.pem -inkey $DOMAIN.key.pem -out blah.p12 -name "Bill Gates"\n# \u5bf9 email \u52a0\u5bc6\nopenssl smine -sign -in msg.txt -text -out msg.encrypted -signer $DOMAIN.crt.pem -inkey $DOMAIN.key.pem\n\n# \u521b\u5efa CA\nopenssl req -new -x509 -keyout private/something-CA.key.pem -out ./something-CA.crt.pem -days 3650\n# \u5bfc\u51fa\u4e3a DER \u683c\u5f0f, \u6d4f\u89c8\u5668\u4f7f\u7528\nopenssl x509 -in something-CA.crt.pem -outform der -out something-CA.crt\n\n# \u8bc1\u4e66\u56de\u6536\nopenssl ca -revoke $DOMAIN.crt.pem\n# Generate Certificate Revocation List (CRL)\nopenssl ca -gencrl -out crl/$DOMAIN-CA.crl\n# Sign Certificate Request\nopenssl ca -out blah.crt.pem -in $DOMAIN.req.pem\n# Create Diffie-Hoffman Parameters for Current CA\nopenssl dhparam -out $DOMAIN-CA.dhp.pem 1536\n\n# Create self-signed certificate from generated key\nopenssl req -new -x509 -sha256 -key $DOMAIN.key.pem -out $DOMAIN.crt.pem\n\n\n# \u6587\u4ef6\u52a0\u5bc6\nopenssl enc -bf -A -in file_to_encrypt.txt\n# \u6587\u4ef6\u89e3\u5bc6\nopenssl enc -bf -d -A -in file_to_encrypt.txt\n\n# \u4e3b\u673a\u9a8c\u8bc1\n# =======\n# IMAP\nopenssl s_client -connect localhost:993 -quiet > /dev/null\n# SMTP\nopenssl s_client -connect localhost:465 -quiet > /dev/null\n# HTTP\necho HEAD / | openssl s_client -connect localhost:443 -quiet > /dev/null\n')),(0,i.kt)("h3",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"li"},"OPENSSL_CONF")," \u73af\u5883\u53d8\u91cf\u6765\u5236\u5b9a\u914d\u7f6e\u6587\u4ef6\u8def\u5f84"),(0,i.kt)("li",{parentName:"ul"},"\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u540d\u4e3a ",(0,i.kt)("inlineCode",{parentName:"li"},"openssl.cnf")),(0,i.kt)("li",{parentName:"ul"},"\u914d\u7f6e\u5206\u4e3a\u8bf4\u660e\u548c\u9ed8\u8ba4\u503c")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# -batch  \u4e0d\u8be2\u95ee\u95ee\u9898\n# -config \u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\n# -utf8   \u8bf4\u660e\u5185\u5bb9\u4e3a utf8 \u5b57\u7b26\n# -newkey \u6307\u5b9a\u751f\u6210 key \u4fe1\u606f, rsa:bits, dsa:file, ec:file\nopenssl req -new -x509 -keyout wener.key.pem -out wener.crt.pem -days 365\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"req \u9ed8\u8ba4\u914d\u7f6e")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Country Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"req \u914d\u7f6e\u793a\u4f8b")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"openssl_conf = conf\n[conf]\nalg_section = evp_sect\n[evp_sect]\nfips_mode = no\n\n[req]\ndistinguished_name = req_distinguished_name\n\n[req_distinguished_name]\ncountryName = \u56fd\u5bb6\u540d\u5b57(\u4e24\u4e2a\u5b57\u7b26)\ncountryName_default = CN\nstateOrProvinceName = \u7701\u5e02\u540d\u5b57\nstateOrProvinceName_default = \u4e0a\u6d77\u5e02\nlocalityName = \u57ce\u5e02\u533a\u57df\u540d\u5b57\nlocalityName_default = \u95f5\u884c\u533a\norganizationalUnitName = \u7ec4\u7ec7\u5355\u4f4d\u540d\u5b57\norganizationalUnitName_default = \u6587\u96ea\u79d1\u6280\u53d1\u5c55\u6709\u9650\u516c\u53f8\ncommonName = \u516c\u5171\u540d\u5b57\ncommonName_default = wener.me\ncommonName_max = 64\n")))}d.isMDXComponent=!0}}]);