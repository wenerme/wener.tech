"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[3300],{49613:function(e,n,t){t.d(n,{Zo:function(){return h},kt:function(){return d}});var r=t(59496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||s;return t?r.createElement(f,o(o({ref:n},h),{},{components:t})):r.createElement(f,o({ref:n},h))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},67238:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return d},default:function(){return y},frontMatter:function(){return u},metadata:function(){return f},toc:function(){return b}});var r=t(49613),a=Object.defineProperty,s=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,h=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&h(e,t,n[t]);if(i)for(var t of i(n))c.call(n,t)&&h(e,t,n[t]);return e};const u={title:"OpenSearch Dashboard"},d="OpenSearch Dashboard",f={unversionedId:"db/search/opensearch-dashboard",id:"db/search/opensearch-dashboard",title:"OpenSearch Dashboard",description:"- opensearch-project/OpenSearch-Dashboards",source:"@site/../notes/db/search/opensearch-dashboard.md",sourceDirName:"db/search",slug:"/db/search/opensearch-dashboard",permalink:"/notes/db/search/opensearch-dashboard",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/db/search/opensearch-dashboard.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1672817159,formattedLastUpdatedAt:"Jan 4, 2023",frontMatter:{title:"OpenSearch Dashboard"},sidebar:"docs",previous:{title:"milvus",permalink:"/notes/db/search/milvus"},next:{title:"opensearch-security",permalink:"/notes/db/search/opensearch-security"}},m={},b=[],g={toc:b};function y(e){var n,t=e,{components:a}=t,h=((e,n)=>{var t={};for(var r in e)l.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&i)for(var r of i(e))n.indexOf(r)<0&&c.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=p(p({},g),h),s(n,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",p({},{id:"opensearch-dashboard"}),"OpenSearch Dashboard"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/opensearch-project/OpenSearch-Dashboards"}),"opensearch-project/OpenSearch-Dashboards")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/opensearch-project/OpenSearch-Dashboards/blob/main/DEVELOPER_GUIDE.md"}),"Developer Guide")),(0,r.kt)("li",{parentName:"ul"},"/usr/share/opensearch-dashboards/config",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"node.options"),(0,r.kt)("li",{parentName:"ul"},"opensearch.example.org.cert"),(0,r.kt)("li",{parentName:"ul"},"opensearch.example.org.key"),(0,r.kt)("li",{parentName:"ul"},"opensearch_dashboards.yml")))),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml",metastring:'title="opensearch_dashboards.yml"',title:'"opensearch_dashboards.yml"'}),"server.port: 5601\nserver.host: '0.0.0.0'\n# \u4e0d\u5305\u542b\u7ed3\u5c3e /\n# server.basePath: \"\"\n# \u79fb\u9664 basePath\n# server.rewriteBasePath: false\n\n# The maximum payload size in bytes for incoming server requests.\n# server.maxPayloadBytes: 1048576\n\n# \u663e\u793a\u7528\nserver.name: 'OpenSearch'\n\n# \u670d\u52a1\u7aef\u4fe1\u606f\nopensearch.hosts: [https://localhost:9200]\nopensearch.ssl.verificationMode: none\nopensearch.username: admin\nopensearch.password: admin\nopensearch.requestHeadersWhitelist: [authorization, securitytenant]\n\n# OpenSearch Dashboards uses an index in OpenSearch to store saved searches, visualizations and\n# dashboards. OpenSearch Dashboards creates a new index if the index doesn't already exist.\n# opensearchDashboards.index: \".opensearch_dashboards\"\n\n# The default application to load.\n# opensearchDashboards.defaultAppId: \"home\"\n\n# Setting for an optimized healthcheck that only uses the local OpenSearch node to do Dashboards healthcheck.\n# This settings should be used for large clusters or for clusters with ingest heavy nodes.\n# It allows Dashboards to only healthcheck using the local OpenSearch node rather than fan out requests across all nodes.\n#\n# It requires the user to create an OpenSearch node attribute with the same name as the value used in the setting\n# This node attribute should assign all nodes of the same cluster an integer value that increments with each new cluster that is spun up\n# e.g. in opensearch.yml file you would set the value to a setting using node.attr.cluster_id:\n# Should only be enabled if there is a corresponding node attribute created in your OpenSearch config that matches the value here\n# opensearch.optimizedHealthcheckId: \"cluster_id\"\n\n# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.\n# These settings enable SSL for outgoing requests from the OpenSearch Dashboards server to the browser.\n# server.ssl.enabled: false\n# server.ssl.certificate: /path/to/your/server.crt\n# server.ssl.key: /path/to/your/server.key\n\n# Optional settings that provide the paths to the PEM-format SSL certificate and key files.\n# These files are used to verify the identity of OpenSearch Dashboards to OpenSearch and are required when\n# xpack.security.http.ssl.client_authentication in OpenSearch is set to required.\n# opensearch.ssl.certificate: /path/to/your/client.crt\n# opensearch.ssl.key: /path/to/your/client.key\n\n# Optional setting that enables you to specify a path to the PEM file for the certificate\n# authority for your OpenSearch instance.\n# opensearch.ssl.certificateAuthorities: [ \"/path/to/your/CA.pem\" ]\n\n# To disregard the validity of SSL certificates, change this setting's value to 'none'.\n# opensearch.ssl.verificationMode: full\n\n# Time in milliseconds to wait for OpenSearch to respond to pings. Defaults to the value of\n# the opensearch.requestTimeout setting.\n# opensearch.pingTimeout: 1500\n\n# Time in milliseconds to wait for responses from the back end or OpenSearch. This value\n# must be a positive integer.\n# opensearch.requestTimeout: 30000\n\n# List of OpenSearch Dashboards client-side headers to send to OpenSearch. To send *no* client-side\n# headers, set this value to [] (an empty list).\n# opensearch.requestHeadersWhitelist: [ authorization ]\n\n# Header names and values that are sent to OpenSearch. Any custom headers cannot be overwritten\n# by client-side headers, regardless of the opensearch.requestHeadersWhitelist configuration.\n# opensearch.customHeaders: {}\n\n# Time in milliseconds for OpenSearch to wait for responses from shards. Set to 0 to disable.\n# opensearch.shardTimeout: 30000\n\n# Logs queries sent to OpenSearch. Requires logging.verbose set to true.\n# opensearch.logQueries: false\n\n# Specifies the path where OpenSearch Dashboards creates the process ID file.\n# pid.file: /var/run/opensearchDashboards.pid\n\n# Enables you to specify a file where OpenSearch Dashboards stores log output.\n# logging.dest: stdout\n\n# Set the value of this setting to true to suppress all logging output.\n# logging.silent: false\n\n# Set the value of this setting to true to suppress all logging output other than error messages.\n# logging.quiet: false\n\n# Set the value of this setting to true to log all events, including system usage information\n# and all requests.\n# logging.verbose: false\n\n# Set the interval in milliseconds to sample system and process performance\n# metrics. Minimum is 100ms. Defaults to 5000.\n# ops.interval: 5000\n\n# Specifies locale to be used for all localizable strings, dates and number formats.\n# Supported languages are the following: English - en , by default , Chinese - zh-CN .\n# i18n.locale: \"en\"\n\n# Set the allowlist to check input graphite Url. Allowlist is the default check list.\n# vis_type_timeline.graphiteAllowedUrls: ['https://www.hostedgraphite.com/UID/ACCESS_KEY/graphite']\n\n# Set the blocklist to check input graphite Url. Blocklist is an IP list.\n# Below is an example for reference\n# vis_type_timeline.graphiteBlockedIPs: [\n#  //Loopback\n#  '127.0.0.0/8',\n#  '::1/128',\n#  //Link-local Address for IPv6\n#  'fe80::/10',\n#  //Private IP address for IPv4\n#  '10.0.0.0/8',\n#  '172.16.0.0/12',\n#  '192.168.0.0/16',\n#  //Unique local address (ULA)\n#  'fc00::/7',\n#  //Reserved IP address\n#  '0.0.0.0/8',\n#  '100.64.0.0/10',\n#  '192.0.0.0/24',\n#  '192.0.2.0/24',\n#  '198.18.0.0/15',\n#  '192.88.99.0/24',\n#  '198.51.100.0/24',\n#  '203.0.113.0/24',\n#  '224.0.0.0/4',\n#  '240.0.0.0/4',\n#  '255.255.255.255/32',\n#  '::/128',\n#  '2001:db8::/32',\n#  'ff00::/8',\n# ]\n# vis_type_timeline.graphiteBlockedIPs: []\n\n# opensearchDashboards.branding:\n#   logo:\n#     defaultUrl: \"\"\n#     darkModeUrl: \"\"\n#   mark:\n#     defaultUrl: \"\"\n#     darkModeUrl: \"\"\n#   loadingLogo:\n#     defaultUrl: \"\"\n#     darkModeUrl: \"\"\n#   faviconUrl: \"\"\n#   applicationTitle: \"\"\n\n# Set the value of this setting to true to capture region blocked warnings and errors\n# for your map rendering services.\n# map.showRegionBlockedWarning: false%\n\n# Set the value of this setting to false to suppress search usage telemetry\n# for reducing the load of OpenSearch cluster.\n# data.search.usageTelemetry.enabled: false\n\n# 2.4 renames 'wizard.enabled: false' to 'vis_builder.enabled: false'\n# Set the value of this setting to false to disable VisBuilder\n# functionality in Visualization.\n# vis_builder.enabled: false\n\n# 2.4 New Experimental Feature\n# Set the value of this setting to true to enable the experimental multiple data source\n# support feature. Use with caution.\n# data_source.enabled: false\n# Set the value of these settings to customize crypto materials to encryption saved credentials\n# in data sources.\n# data_source.encryption.wrappingKeyName: 'changeme'\n# data_source.encryption.wrappingKeyNamespace: 'changeme'\n# data_source.encryption.wrappingKey: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\nopensearch_security.multitenancy.enabled: true\nopensearch_security.multitenancy.tenants.preferred: [Private, Global]\nopensearch_security.readonly_mode.roles: [kibana_read_only]\n# Use this setting if you are running opensearch-dashboards without https\nopensearch_security.cookie.secure: false\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Minimal")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"opensearch.hosts: [https://localhost:9200]\nopensearch.ssl.verificationMode: none\nopensearch.username: kibanaserver\nopensearch.password: kibanaserver\nopensearch.requestHeadersWhitelist: [authorization, securitytenant]\n\nopensearch_security.multitenancy.enabled: true\nopensearch_security.multitenancy.tenants.preferred: [Private, Global]\nopensearch_security.readonly_mode.roles: [kibana_read_only]\n# Use this setting if you are running opensearch-dashboards without https\nopensearch_security.cookie.secure: false\nserver.host: '0.0.0.0'\n")))}y.isMDXComponent=!0}}]);