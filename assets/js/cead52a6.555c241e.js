"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[74313],{49613:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var o=t(59496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=c(t),d=r,m=f["".concat(l,".").concat(d)]||f[d]||g[d]||s;return t?o.createElement(m,i(i({ref:n},u),{},{components:t})):o.createElement(m,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},74039:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return g}});var o=t(96600),r=t(27279),s=(t(59496),t(49613)),i=["components"],a={title:"Asterisk Log"},l=void 0,c={unversionedId:"voip/asterisk/asterisk-log",id:"voip/asterisk/asterisk-log",title:"Asterisk Log",description:"logger.conf",source:"@site/notes/voip/asterisk/asterisk-log.md",sourceDirName:"voip/asterisk",slug:"/voip/asterisk/asterisk-log",permalink:"/notes/voip/asterisk/asterisk-log",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/voip/asterisk/asterisk-log.md",tags:[],version:"current",frontMatter:{title:"Asterisk Log"},sidebar:"docs",previous:{title:"Asterisk LDAP",permalink:"/notes/voip/asterisk/asterisk-ldap"},next:{title:"Asterisk Modules",permalink:"/notes/voip/asterisk/asterisk-moduels"}},u={},g=[{value:"logger.conf",id:"loggerconf",level:2}],f={toc:g};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"logger reload\n")),(0,s.kt)("h2",{id:"loggerconf"},"logger.conf"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-conf"},"[general]\n; \u81ea\u5b9a\u4e49\u65e5\u671f\u683c\u5f0f\n; strftime \u683c\u5f0f\n;dateformat=%F %T       ; ISO 8601 date format yyyy-mm-dd HH:MM:SS\n;dateformat=%F %T.%3q   ; with milliseconds\n\n; \u8bb0\u5f55 callids\nuse_callids = yes\n; \u8bb0\u5f55 hostname\n;appendhostname = yes\n\n; log queue events to a file\nqueue_log = yes\n; queue_log always goes to a file, even when a realtime backend is present (defaults to no).\nqueue_log_to_file = no\n; queue_log filename\nqueue_log_name = queue_log\n; queue log \u4f7f\u7528 realtime \u65f6 \u65f6\u95f4\u6233\u8bb0\u5f55\u4e3a GMT \u800c\u4e0d\u662f localtime\nqueue_log_realtime_use_gmt = no\n\n; \u65e5\u5fd7\u6eda\u52a8\u7b56\u7565\n; none:         \u4e0d\u5904\u7406\uff0c\u7531\u5916\u90e8\u5f15\u7528\u5904\u7406.\n; sequential:  Rename archived logs in order, such that the newest\n;              has the highest sequence number [default].  When\n;              exec_after_rotate is set, ${filename} will specify\n;              the new archived logfile.\n; rotate:  Rotate all the old files, such that the oldest has the\n;          highest sequence number [this is the expected behavior\n;          for Unix administrators].  When exec_after_rotate is\n;          set, ${filename} will specify the original root filename.\n; timestamp:  Rename the logfiles using a timestamp instead of a\n;             sequence number when \"logger rotate\" is executed.\n;             When exec_after_rotate is set, ${filename} will\n;             specify the new archived logfile.\n;rotatestrategy = rotate\n\n; \u65e5\u5fd7\u6eda\u52a8\u540e\u6267\u884c\u547d\u4ee4\n; \u4ee5\u4e0b\u547d\u4ee4\u4fdd\u6301\u6700\u8fd1\u4e24\u4e2a\u4e0d\u538b\u7f29\uff0c\u4e4b\u524d\u7684\u538b\u7f29\n; exec_after_rotate=gzip -9 ${filename}.2\n;\n;\n; For each file, specify what to log.\n;\n; For console logging, you set options at start of\n; Asterisk with -v for verbose and -d for debug\n; See 'asterisk -h' for more information.\n;\n; Directory for log files is configures in asterisk.conf\n; option astlogdir\n;\n; All log messages go to a queue serviced by a single thread\n; which does all the IO.  This setting controls how big that\n; queue can get (and therefore how much memory is allocated)\n; before new messages are discarded.\n; The default is 1000\n;logger_queue_limit = 250\n;\n;\n[logfiles]\n;\n; Format is:\n;\n; logger_name => [formatter]levels\n;\n; The name of the logger dictates not only the name of the logging\n; channel, but also its type. Valid types are:\n;   - 'console'  - The root console of Asterisk\n;   - 'syslog'   - Linux syslog, with facilities specified afterwards with\n;                  a period delimiter, e.g., 'syslog.local0'\n;   - 'filename' - The name of the log file to create. This is the default\n;                  for log channels.\n;\n; Filenames can either be relative to the standard Asterisk log directory\n; (see 'astlogdir' in asterisk.conf), or absolute paths that begin with\n; '/'.\n;\n; An optional formatter can be specified prior to the log levels sent\n; to the log channel. The formatter is defined immediately preceeding the\n; levels, and is enclosed in square brackets. Valid formatters are:\n;   - [default] - The default formatter, this outputs log messages using a\n;                 human readable format.\n;   - [plain]   - The plain formatter, this outputs log messages using a\n;                 human readable format with the addition of function name\n;                 and line number. No color escape codes are ever printed\n;                 nor are verbose messages treated specially.\n;   - [json]    - Log the output in JSON. Note that JSON formatted log entries,\n;                 if specified for a logger type of 'console', will be formatted\n;                 per the 'default' formatter for log messages of type VERBOSE.\n;                 This is due to the remote consoles intepreting verbosity\n;                 outside of the logging subsystem.\n;\n; Log levels include the following, and are specified in a comma delineated\n; list:\n;    debug\n;    trace\n;    notice\n;    warning\n;    error\n;    verbose(<level>)\n;    dtmf\n;    fax\n;    security\n;\n; Verbose takes an optional argument, in the form of an integer level. The\n; verbose level can be set per logfile. Verbose messages with higher levels\n; will not be logged to the file.  If the verbose level is not specified, it\n; will log verbose messages following the current level of the root console.\n;\n; Debug has multiple levels like verbose. However, it is a system wide setting\n; and cannot be specified per logfile. You specify the debug level elsewhere\n; such as the CLI 'core set debug 3', starting Asterisk with '-ddd', or in\n; asterisk.conf 'debug=3'.\n;\n; Special level name \"*\" means all levels, even dynamic levels registered\n; by modules after the logger has been initialized (this means that loading\n; and unloading modules that create/remove dynamic logger levels will result\n; in these levels being included on filenames that have a level name of \"*\",\n; without any need to perform a 'logger reload' or similar operation).\n; Note that there is no value in specifying both \"*\" and specific level names\n; for a filename; the \"*\" level means all levels.  The only exception is if\n; you need to specify a specific verbose level. e.g, \"verbose(3),*\".\n;\n; We highly recommend that you DO NOT turn on debug mode if you are simply\n; running a production system.  Debug mode turns on a LOT of extra messages,\n; most of which you are unlikely to understand without an understanding of\n; the underlying code.  Do NOT report debug messages as code issues, unless\n; you have a specific issue that you are attempting to debug.  They are\n; messages for just that -- debugging -- and do not rise to the level of\n; something that merit your attention as an Asterisk administrator.  Both\n; debug and trace messages are also very verbose and can and do fill up\n; logfiles quickly.  This is another reason not to have debug or trace\n; modes on a production system unless you are in the process of debugging\n; a specific issue.\n;\n;debug.log => error,warning,notice,verbose,debug\n;trace.log => trace\n;security.log => security\nconsole => notice,warning,error\n;console => notice,warning,error,debug\nmessages.log => notice,warning,error\n;full.log => notice,warning,error,debug,verbose,dtmf,fax\n;\n;full-json.log => [json]debug,verbose,notice,warning,error,dtmf,fax\n;\n;syslog keyword : This special keyword logs to syslog facility\n;\n;syslog.local0 => notice,warning,error\n;\n")))}d.isMDXComponent=!0}}]);