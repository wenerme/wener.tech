"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[84650],{49613:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return k}});var n=t(59496);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),k=s,m=u["".concat(l,".").concat(k)]||u[k]||p[k]||o;return t?n.createElement(m,a(a({ref:r},d),{},{components:t})):n.createElement(m,a({ref:r},d))}));function k(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=u;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},66455:function(e,r,t){t.r(r),t.d(r,{assets:function(){return g},contentTitle:function(){return k},default:function(){return v},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return y}});var n=t(49613),s=Object.defineProperty,o=Object.defineProperties,a=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,r,t)=>r in e?s(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,p=(e,r)=>{for(var t in r||(r={}))l.call(r,t)&&d(e,t,r[t]);if(i)for(var t of i(r))c.call(r,t)&&d(e,t,r[t]);return e};const u={title:"K3S in Docker"},k="K3S in Docker",m={unversionedId:"devops/kubernetes/distro/k3s/k3d",id:"devops/kubernetes/distro/k3s/k3d",title:"K3S in Docker",description:"- rancher/k3d - \u5bb9\u5668\u8fd0\u884c",source:"@site/../notes/devops/kubernetes/distro/k3s/k3d.md",sourceDirName:"devops/kubernetes/distro/k3s",slug:"/devops/kubernetes/distro/k3s/k3d",permalink:"/notes/devops/kubernetes/distro/k3s/k3d",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/devops/kubernetes/distro/k3s/k3d.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1676862087,formattedLastUpdatedAt:"Feb 20, 2023",frontMatter:{title:"K3S in Docker"},sidebar:"docs",previous:{title:"K3S",permalink:"/notes/devops/kubernetes/distro/k3s/"},next:{title:"Centos",permalink:"/notes/devops/kubernetes/distro/k3s/centos"}},g={},y=[{value:"Registry",id:"registry",level:2},{value:"macOS",id:"macos",level:2},{value:"Failed Cluster Start: error during post-start cluster preparation: error overwriting contents of /etc/hosts: Exec process in node &#39;k3d-dev-server-0&#39; failed with exit code &#39;139&#39;: Logs from failed access process:",id:"failed-cluster-start-error-during-post-start-cluster-preparation-error-overwriting-contents-of-etchosts-exec-process-in-node-k3d-dev-server-0-failed-with-exit-code-139-logs-from-failed-access-process",level:2}],f={toc:y};function v(e){var r,t=e,{components:s}=t,d=((e,r)=>{var t={};for(var n in e)l.call(e,n)&&r.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))r.indexOf(n)<0&&c.call(e,n)&&(t[n]=e[n]);return t})(t,["components"]);return(0,n.kt)("wrapper",(r=p(p({},f),d),o(r,a({components:s,mdxType:"MDXLayout"}))),(0,n.kt)("h1",p({},{id:"k3s-in-docker"}),"K3S in Docker"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://github.com/rancher/k3d"}),"rancher/k3d")," - \u5bb9\u5668\u8fd0\u884c",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"\u57fa\u4e8e\u4e4b\u524d\u7684 ",(0,n.kt)("a",p({parentName:"li"},{href:"https://github.com/zeerorg/k3s-in-docker"}),"zeerorg/k3s-in-docker")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://github.com/rancher/k3s/blob/master/docker-compose.yml"}),"rancher/k3s/docker-compose.yml"))))),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'curl -Lo k3d https://ghproxy.com/github.com/k3d-io/k3d/releases/download/v5.4.7/k3d-linux-arm64\nchmod +x k3d\nmv k3d /usr/local/bin\n\n# k3d-default.yaml\nk3d config init\n\nk3d cluster create dev\n\nexport KUBECONFIG="$(k3d kubeconfig write k3s-default)"\n')),(0,n.kt)("h2",p({},{id:"registry"}),"Registry"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"write to /etc/rancher/k3s/registries.yaml")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'# \u81ea\u5b9a\u4e49\nk3d cluster create mycluster --registry-config "$HOME/my-registries.yaml"\n\nk3d cluster create \\\n  --volume "${HOME}/.k3d/my-registries.yaml:/etc/rancher/k3s/registries.yaml" \\\n  --volume "${HOME}/.k3d/my-company-root.pem:/etc/ssl/certs/my-company-root.pem"\n\n# \u542f\u52a8 registry\nk3d cluster create mycluster --registry-create mycluster-registry\ndocker ps -f name=mycluster-registry\n\nk3d registry create myregistry.localhost --port 12345\nk3d cluster create newcluster --registry-use k3d-myregistry.localhost:12345\n')),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"mirrors:\n  'my.company.registry:5000':\n    endpoint:\n      - http://my.company.registry:5000\n")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),'apiVersion: k3d.io/v1alpha3\nkind: Simple\nname: test\nservers: 1\nagents: 2\nregistries:\n  create:\n    name: myregistry\n  config: |\n    mirrors:\n      "my.company.registry":\n        endpoint:\n          - http://my.company.registry:5000\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"k3d managed")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"/var/lib/registry",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"\u9ed8\u8ba4\u6ca1\u6709\u6620\u5c04\u51fa\u6765"))),(0,n.kt)("li",{parentName:"ul"},"/etc/docker/registry/config.yml",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"\u914d\u7f6e")))),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\ndocker exec dev-registry cat /etc/docker/registry/config.yml\n\n# host.k3d.internal\n# k3d-dev-server-0\n\ndocker exec k3d-dev-server-0 cat /etc/hosts\n# \u66f4\u65b0\u4e86 k3s \u955c\u50cf\u914d\u7f6e\ndocker exec k3d-dev-server-0 cat /etc/rancher/k3s/registries.yaml\n")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"auths: null\nconfigs: null\nmirrors:\n  dev-registry:5000:\n    endpoint:\n      - http://dev-registry:5000\n  dev-registry:42095:\n    endpoint:\n      - http://dev-registry:5000\n")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# \u786e\u4fdd\u80fd\u89e3\u6790\ndocker exec k3d-dev-server-0 nslookup dev-registry\n\n# host \u901a\u8fc7 bridge \u8bbf\u95ee\ndocker inspect dev-registry -f '{{.NetworkSettings.Networks.bridge.IPAddress}}'\ncurl $(docker inspect dev-registry -f '{{.NetworkSettings.Networks.bridge.IPAddress}}'):5000 -I\n\n# \u80fd\u89e3\u6790\u6307\u5411\u540e\u53ef\u4ee5\u6d4b\u8bd5\necho \"$(docker inspect dev-registry -f '{{.NetworkSettings.Networks.bridge.IPAddress}}') dev-registry.localhost\" >> /etc/hosts\n\ndocker pull wener/base:latest\ndocker tag wener/base:latest dev-registry.localhost:5000/wener_base:latest\n# \u4e3b\u8981\u6ce8\u610f\u914d\u7f6e insecure-registries\ndocker push dev-registry.localhost:5000/wener_base:latest\n")),(0,n.kt)("h2",p({},{id:"macos"}),"macOS"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"brew install k3d\n")),(0,n.kt)("h2",p({},{id:"failed-cluster-start-error-during-post-start-cluster-preparation-error-overwriting-contents-of-etchosts-exec-process-in-node-k3d-dev-server-0-failed-with-exit-code-139-logs-from-failed-access-process"}),"Failed Cluster Start: error during post-start cluster preparation: error overwriting contents of /etc/hosts: Exec process in node 'k3d-dev-server-0' failed with exit code '139': Logs from failed access process:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://github.com/k3d-io/k3d/issues/1220"}),"https://github.com/k3d-io/k3d/issues/1220"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"5.4.7 BUG, 5.4.6 \u6ca1\u95ee\u9898")))),(0,n.kt)("p",null,"\u8986\u76d6 hosts \u65f6\u5f02\u5e38"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"sh -c cat /tmp/-etc-hosts-cUAunADhzSQlEbdflLOb > /etc/hosts\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5199\u5165\u5185\u5bb9")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-hosts"}),"::1 ip6-localhost ip6-loopback localhost\n127.0.0.1 localhost\n172.18.0.1 host.k3d.internal\n172.18.0.2 k3d-dev-server-0\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n")))}v.isMDXComponent=!0}}]);