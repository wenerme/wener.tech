"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[86563],{49940:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=a(96600),n=a(27279),l=(a(59496),a(3905)),i=["components"],s={id:"words",title:"\u8bcd\u6c47\u5bf9\u6bd4"},o=void 0,u={unversionedId:"reference/words",id:"reference/words",title:"\u8bcd\u6c47\u5bf9\u6bd4",description:"order vs sort",source:"@site/notes/reference/words.md",sourceDirName:"reference",slug:"/reference/words",permalink:"/notes/reference/words",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/reference/words.md",tags:[],version:"current",frontMatter:{id:"words",title:"\u8bcd\u6c47\u5bf9\u6bd4"},sidebar:"docs",previous:{title:"\u5f00\u53d1\u8bcd\u6c47",permalink:"/notes/reference/software/glossary"},next:{title:"ACME",permalink:"/notes/security/acme-awesome"}},p={},c=[{value:"order vs sort",id:"order-vs-sort",level:2},{value:"tag vs label",id:"tag-vs-label",level:2},{value:"message vs event vs command",id:"message-vs-event-vs-command",level:2},{value:"event bus vs message queue",id:"event-bus-vs-message-queue",level:2},{value:"relation vs association",id:"relation-vs-association",level:2},{value:"relationship vs relation",id:"relationship-vs-relation",level:2},{value:"property vs attribute",id:"property-vs-attribute",level:2},{value:"state vs status",id:"state-vs-status",level:2},{value:"Concurrency vs Parallelism / \u5e76\u53d1 vs \u5e76\u884c",id:"concurrency-vs-parallelism--\u5e76\u53d1-vs-\u5e76\u884c",level:2},{value:"Deadlock vs Starvation vs Live-lock / \u6b7b\u9501 vs \u9965\u997f vs \u6d3b\u9501",id:"deadlock-vs-starvation-vs-live-lock--\u6b7b\u9501-vs-\u9965\u997f-vs-\u6d3b\u9501",level:2}],m={toc:c};function k(e){var t=e.components,a=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"order-vs-sort"},"order vs sort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"order - \u987a\u5e8f",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5f3a\u8c03\u56fa\u6709\u987a\u5e8f"))),(0,l.kt)("li",{parentName:"ul"},"sort - \u6392\u5e8f",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5f3a\u8c03\u5206\u7c7b - \u5f62\u5f0f\u4e0d\u56fa\u5b9a")))),(0,l.kt)("h2",{id:"tag-vs-label"},"tag vs label"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"tag - \u6807\u8bb0",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6807\u8bc6\u6027"))),(0,l.kt)("li",{parentName:"ul"},"label - \u6807\u7b7e",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"KV \u6027\u8d28")))),(0,l.kt)("h2",{id:"message-vs-event-vs-command"},"message vs event vs command"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"event",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u53ea\u5173\u5fc3\u53d1\u51fa"),(0,l.kt)("li",{parentName:"ul"},"fire and forget"))),(0,l.kt)("li",{parentName:"ul"},"message",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6709\u660e\u786e\u76ee\u6807"),(0,l.kt)("li",{parentName:"ul"},"\u901a\u4fe1\u65b9\u5f0f"))),(0,l.kt)("li",{parentName:"ul"},"command",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6709\u660e\u786e\u5bd3\u610f")))),(0,l.kt)("h2",{id:"event-bus-vs-message-queue"},"event bus vs message queue"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"event bus",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5f3a\u8c03\u5b9e\u65f6\u901a\u4fe1"),(0,l.kt)("li",{parentName:"ul"},"\u4e00\u822c\u6ca1\u6709\u7f13\u51b2\u673a\u5236"),(0,l.kt)("li",{parentName:"ul"},"\u53ef\u80fd\u540c\u6b65\u6267\u884c"))),(0,l.kt)("li",{parentName:"ul"},"message queue",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5f3a\u8c03\u961f\u5217\u3001\u963b\u585e\u3001\u7f13\u51b2"),(0,l.kt)("li",{parentName:"ul"},"\u53ef\u80fd\u88ab\u6279\u5904\u7406"),(0,l.kt)("li",{parentName:"ul"},"\u4e00\u822c\u5f02\u6b65\u6267\u884c")))),(0,l.kt)("h2",{id:"relation-vs-association"},"relation vs association"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"relation",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6cdb\u6307\u5173\u7cfb"),(0,l.kt)("li",{parentName:"ul"},"ERM - \u5b9e\u4f53\u5173\u7cfb\u6a21\u578b"),(0,l.kt)("li",{parentName:"ul"},"relate - \u540d\u8bcd - \u5173\u7cfb"))),(0,l.kt)("li",{parentName:"ul"},"association",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5177\u4f53\u5173\u7cfb"),(0,l.kt)("li",{parentName:"ul"},"User \bassociated with Order"),(0,l.kt)("li",{parentName:"ul"},"\u7528\u6237\u4e0e\u8d26\u5355\u4e00\u5bf9\u591a\u7684\u5173\u8054\u5173\u7cfb"),(0,l.kt)("li",{parentName:"ul"},"associate - \u52a8\u8bcd\u3001\u540d\u8bcd - \u5173\u8054")))),(0,l.kt)("h2",{id:"relationship-vs-relation"},"relationship vs relation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"relation",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5982\u4f55\u8fdb\u884c\u5173\u8054\u7684 - how to connect"))),(0,l.kt)("li",{parentName:"ul"},"relationship",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5173\u8054\u672c\u8eab - the connection")))),(0,l.kt)("h2",{id:"property-vs-attribute"},"property vs attribute"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"property",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u56fa\u6709\u5c5e\u6027"),(0,l.kt)("li",{parentName:"ul"},"\u6539\u53d8 property \u5219\u4e0d\u662f\u540c\u4e00\u4e2a\u7269\u4f53"))),(0,l.kt)("li",{parentName:"ul"},"attribute",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u81ea\u6709\u5c5e\u6027"),(0,l.kt)("li",{parentName:"ul"},"\u76f8\u540c property \u4e0b\u6bcf\u4e2a\u7269\u4f53\u6709\u4e0d\u540c\u7684\u5c5e\u6027")))),(0,l.kt)("h2",{id:"state-vs-status"},"state vs status"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"state",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4e00\u822c\u6307\u77ac\u65f6\uff0c\u5f53\u524d\u72b6\u6001"),(0,l.kt)("li",{parentName:"ul"},"\u4f8b\u5982 \u4efb\u52a1\u7684\u72b6\u6001\uff1a\u505c\u6b62"),(0,l.kt)("li",{parentName:"ul"},"\u4f8b\u5982 \u7269\u4f53\u7684\u72b6\u6001\uff1a\u6db2\u6001\u7684\u3001\u56fa\u6001\u7684"),(0,l.kt)("li",{parentName:"ul"},"\u56fa\u6709\u7684\u72b6\u6001"))),(0,l.kt)("li",{parentName:"ul"},"status",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4e00\u822c\u53ef\u679a\u4e3e\uff0c\u6307\u6709\u90a3\u4e9b\u72b6\u6001"),(0,l.kt)("li",{parentName:"ul"},"\u53ef\u6307\u5728\u56fa\u5b9a\u72b6\u6001\u4e2d\u6d41\u8f6c"),(0,l.kt)("li",{parentName:"ul"},"\u4f8b\u5982 \u4efb\u52a1\u72b6\u6001\uff1a\u505c\u6b62\u3001\u8fd0\u884c\u3001\u521d\u59cb\u5316"),(0,l.kt)("li",{parentName:"ul"},"\u5177\u4f53\u60c5\u51b5\uff0c\u4f8b\u5982 status of stop state - \u63cf\u8ff0\u505c\u6b62\u7684\u539f\u56e0")))),(0,l.kt)("h2",{id:"concurrency-vs-parallelism--\u5e76\u53d1-vs-\u5e76\u884c"},"Concurrency vs Parallelism / \u5e76\u53d1 vs \u5e76\u884c"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5e76\u53d1",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4f8b\u5982 1 \u6838\u5fc3\u7684 CPU \u8fd0\u884c 4 \u4e2a\u7ebf\u7a0b"))),(0,l.kt)("li",{parentName:"ul"},"\u5e76\u884c",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4f8b\u5982 4 \u6838\u5fc3\u7684 CPU \u8fd0\u884c 4 \u4e2a\u7ebf\u7a0b")))),(0,l.kt)("p",null,"\u6458\u81ea Akka \u6587\u6863"),(0,l.kt)("p",null,"Concurrency and parallelism are related concepts, but there are small differences.\nConcurrency means that two or more tasks are making progress even though they might not be executing simultaneously.\nThis can for example be realized with time slicing where parts of tasks are executed sequentially and mixed with parts of other tasks.\nParallelism on the other hand arise when the execution can be truly simultaneous."),(0,l.kt)("h2",{id:"deadlock-vs-starvation-vs-live-lock--\u6b7b\u9501-vs-\u9965\u997f-vs-\u6d3b\u9501"},"Deadlock vs Starvation vs Live-lock / \u6b7b\u9501 vs \u9965\u997f vs \u6d3b\u9501"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6b7b\u9501",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A B \u4e24\u4e2a\u7ebf\u7a0b\uff0c R1 R2 \u4e24\u4e2a\u8d44\u6e90\uff0cA \u6301\u6709 R1 \u9700\u8981 R2\uff0cB \u6301\u6709 R2 \u9700\u8981 R1"))),(0,l.kt)("li",{parentName:"ul"},"\u9965\u997f",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A B \u4e24\u4e2a\u7ebf\u7a0b\uff0c R1 R2 \u4e24\u4e2a\u8d44\u6e90\uff0cA \u6301\u6709 R1 \u548c R2 \u9700\u8981 R2\uff0cB \u9700\u8981 R1 \u624d\u80fd\u7ee7\u7eed\u8fdb\u884c"))),(0,l.kt)("li",{parentName:"ul"},"\u6d3b\u9501",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"A B \u4e24\u4e2a\u7ebf\u7a0b\uff0c R1 R2 \u4e24\u4e2a\u8d44\u6e90\uff0cA \u6301\u6709 R1 \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u68c0\u6d4b R2 \u662f\u5426\u53ef\u7528\uff0cB \u6301\u6709 R2 \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u68c0\u6d4b R1 \u662f\u5426\u53ef\u7528"),(0,l.kt)("li",{parentName:"ul"},"\u90fd\u5728\u5141\u8bb8\uff0c\u4f46\u65e0\u6cd5\u8fdb\u884c\u5230\u4e0b\u4e00\u6b65")))),(0,l.kt)("p",null,"\u6458\u81ea Akka \u6587\u6863"),(0,l.kt)("p",null,"Deadlock arises when several participants are waiting on each other to reach a specific state to be able to progress.\nAs none of them can progress without some other participant to reach a certain state (a \u201cCatch-22\u201d problem) all\naffected subsystems stall. Deadlock is closely related to blocking, as it is necessary that a participant thread be\nable to delay the progression of other threads indefinitely.\nIn the case of deadlock, no participants can make progress, while in contrast Starvation happens, when there are\nparticipants that can make progress, but there might be one or more that cannot. Typical scenario is the case\nof a naive scheduling algorithm that always selects high-priority tasks over low-priority ones. If the number of\nincoming high-priority tasks is constantly high enough, no low-priority ones will be ever finished.\nLivelock is similar to deadlock as none of the participants make progress. The difference though is that instead\nof being frozen in a state of waiting for others to progress, the participants continuously change their state. An\nexample scenario when two participants have two identical resources available. They each try to get the resource,\nbut they also check if the other needs the resource, too. If the resource is requested by the other participant, they\ntry to get the other instance of the resource. In the unfortunate case it might happen that the two participants\n\u201cbounce\u201d between the two resources, never acquiring it, but always yielding to the other."))}k.isMDXComponent=!0},3905:function(e,t,a){a.d(t,{kt:function(){return m}});var r=a(59496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(a),k=n,v=m["".concat(o,".").concat(k)]||m[k]||p[k]||l;return a?r.createElement(v,i(i({ref:t},c),{},{components:a})):r.createElement(v,i({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var u=2;u<l;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"}}]);