"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[17915],{49613:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(59496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},j=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),j=c(t),d=a,m=j["".concat(s,".").concat(d)]||j[d]||p[d]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=j;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}j.displayName="MDXCreateElement"},33850:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=t(96600),a=t(27279),o=(t(59496),t(49613)),i=["components"],l={title:"jq"},s="jq",c={unversionedId:"dev/shell/jq",id:"dev/shell/jq",title:"jq",description:"- https://jqplay.org/",source:"@site/../notes/dev/shell/jq.md",sourceDirName:"dev/shell",slug:"/dev/shell/jq",permalink:"/notes/dev/shell/jq",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/../notes/dev/shell/jq.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1663813e3,formattedLastUpdatedAt:"Sep 22, 2022",frontMatter:{title:"jq"},sidebar:"docs",previous:{title:"rfc",permalink:"/notes/dev/rfc"},next:{title:"Software Awesome",permalink:"/notes/dev/software-awesome"}},u={},p=[{value:"parse error: Invalid numeric literal at line 1, column 3",id:"parse-error-invalid-numeric-literal-at-line-1-column-3",level:2}],j={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},j,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jq"},"jq"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://jqplay.org/"},"https://jqplay.org/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/manual/"},"https://stedolan.github.io/jq/manual/"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'jq \'.components.rows|=sort_by(.id)|.components.rows[].properties|=sort_by(.name)\' file.json\n\n# inplace edit\njqi() {\n  cat <<< "$(jq "$1" < "$2")" > "$2"\n}\njqi ".a=1" test.json\n\n# merge\njq -s add a.json b.json c.json\n\n# deep merge\njq -s \'reduce .[] as $x ({}; . * $x)\' a.json b.json\n\n# array\n# \u975e\u5bf9\u8c61\u573a\u666f\njq -c \'.[]\' names.json | xargs -L 1 echo\n# \u5bf9\u8c61\u573a\u666f\njq -j \'.[] | tostring + "\\u0000"\' names.json | xargs -0 -n1 -I {} jq -n {}\n# \u4fbf\u5229\u6570\u7ec4\u5bf9\u8c61\u5b57\u6bb5\njq -j \'.builds[] | tostring + "\\u0000"\' build.json | xargs -0 -n1 -I {} sh -c "jq -n \'{}\' | jq -r .name"\n\n\nmapfile -t configArr < <(jq -c \'.[]\'  < app-cnfg.json)\nfor config in "${configArr[@]}"; do\n    aws dynamodb put-item --table-name "xxx" --item "$config"\ndone\n\nwhile IFS= read -r config; do\n    aws dynamodb put-item --table-name "xxx" --item "$config"\ndone< <(jq -c \'.[]\' < app-cnfg.json)\n\n# arg\njq --arg v "$PRJNAME" \'.dev.projects[$v]\' config.json\n\n\n# \u901a\u8fc7 redirect\njq \'.key\' <<< "$json_data"\n# \u901a\u8fc7 arg\njq -n --argjson data "$json_data" \'$data.key\'\n# \u901a\u8fc7\u73af\u5883\u53d8\u91cf\njson_data="$json_data" jq -n \'env.json_data | fromjson.key\'\n# \u901a\u8fc7\u53d8\u91cf\njq -n "$json_data" | jq .key\n\n# jsonl\njq -c \'.[]\'                           # array to jsonl\njq -n \'[inputs]\' <in.jsonl >out.json  # jsonl to array\njq --slurp . <in.jsonl >out.json      # jsonl to array\n')),(0,o.kt)("h2",{id:"parse-error-invalid-numeric-literal-at-line-1-column-3"},"parse error: Invalid numeric literal at line 1, column 3"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u53ef\u80fd\u662f\u56e0\u4e3a\u6709 BOM")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dos2unix in.json\n")))}d.isMDXComponent=!0}}]);