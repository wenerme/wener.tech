"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[66447],{49613:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(59496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),f=l(t),d=o,E=f["".concat(u,".").concat(d)]||f[d]||p[d]||i;return t?r.createElement(E,c(c({ref:n},s),{},{components:t})):r.createElement(E,c({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},27938:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=t(96600),o=t(27279),i=(t(59496),t(49613)),c=["components"],a={title:"tinc 1.0"},u=void 0,l={unversionedId:"service/network/tinc/tinc-1.0",id:"service/network/tinc/tinc-1.0",title:"tinc 1.0",description:"- \u53ea\u6709 tincd",source:"@site/notes/service/network/tinc/tinc-1.0.md",sourceDirName:"service/network/tinc",slug:"/service/network/tinc/tinc-1.0",permalink:"/notes/service/network/tinc/tinc-1.0",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/service/network/tinc/tinc-1.0.md",tags:[],version:"current",frontMatter:{title:"tinc 1.0"},sidebar:"docs",previous:{title:"Tinc",permalink:"/notes/service/network/tinc/"},next:{title:"Tinc \u914d\u7f6e",permalink:"/notes/service/network/tinc/tinc-conf"}},s={},p=[],f={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u53ea\u6709 tincd")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETNAME=netname\nNODE=NodeA\nmkdir -p /etc/tinc/$NETNAME/hosts\n# tinc.conf\ncat <<CONF > /etc/tinc/$NETNAME/tinc.conf\nName = $NODE\nMode = switch\n# ConnectTo = $NETANAME\nCONF\n\n# \u751f\u6210 key\ntincd -n $NETNAME -K\n\n\n# tinc-up\ncat <<SH > /etc/tinc/$NETNAME/tinc-up\nifconfig $INTERFACE 10.10.1.1 netmask 255.0.0.0\nSH\n\n# \u968f\u673a port\ncat <<CONF > /etc/tinc/$NETNAME/hosts/$NODE\nPort = 0\nCONF\n\n# \u6dfb\u52a0\u5176\u4ed6\u8282\u70b9\ncat <<CONF > /etc/tinc/$NETNAME/hosts/$NETNAME\n# Subnet = 10.10.0.0/24\nAddress = 4.5.6.7\n\n-----BEGIN RSA PUBLIC KEY-----\n...\n-----END RSA PUBLIC KEY-----\nCONF\n\ntincd -n $NETNAME -Dd 5\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  -c, --config=DIR               Read configuration options from DIR.\n  -D, --no-detach                Don't fork and detach.\n  -d, --debug[=LEVEL]            Increase debug level or set it to LEVEL.\n  -k, --kill[=SIGNAL]            Attempt to kill a running tincd and exit.\n  -n, --net=NETNAME              Connect to net NETNAME.\n  -K, --generate-keys[=BITS]     Generate public/private RSA keypair.\n  -L, --mlock                    Lock tinc into main memory.\n      --logfile[=FILENAME]       Write log entries to a logfile.\n      --pidfile=FILENAME         Write PID to FILENAME.\n  -o, --option=[HOST.]KEY=VALUE  Set global/host configuration value.\n  -R, --chroot                   chroot to NET dir at startup.\n  -U, --user=USER                setuid to given USER at startup.\n      --help                     Display this help and exit.\n      --version                  Output version information and exit.\n")))}d.isMDXComponent=!0}}]);