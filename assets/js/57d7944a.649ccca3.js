"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[86668],{49613:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(59496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},22803:function(e,t,r){r.r(t),r.d(t,{assets:function(){return k},contentTitle:function(){return d},default:function(){return y},frontMatter:function(){return m},metadata:function(){return f},toc:function(){return b}});var n=r(49613),a=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&c(e,r,t[r]);if(o)for(var r of o(t))u.call(t,r)&&c(e,r,t[r]);return e};const m={title:"dtb"},d="Device Tree",f={unversionedId:"os/linux/sys/dtb",id:"os/linux/sys/dtb",title:"dtb",description:"- dtb - Device Tree Blob - device tree binary",source:"@site/../notes/os/linux/sys/dtb.md",sourceDirName:"os/linux/sys",slug:"/os/linux/sys/dtb",permalink:"/notes/os/linux/sys/dtb",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/os/linux/sys/dtb.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1674970578,formattedLastUpdatedAt:"Jan 29, 2023",frontMatter:{title:"dtb"},sidebar:"docs",previous:{title:"Linux Kernel \u65e5\u5fd7\u5e38\u89c1\u95ee\u9898",permalink:"/notes/os/linux/sys/dmesg-faq"},next:{title:"Kernel FAQ",permalink:"/notes/os/linux/sys/kernel-faq"}},k={},b=[{value:"Device Tree",id:"device-tree-1",level:2},{value:"References",id:"references",level:2}],v={toc:b};function y(e){var t,r=e,{components:a}=r,c=((e,t)=>{var r={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&o)for(var n of o(e))t.indexOf(n)<0&&u.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=p(p({},v),c),i(t,l({components:a,mdxType:"MDXLayout"}))),(0,n.kt)("h1",p({},{id:"device-tree"}),"Device Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"dtb - Device Tree Blob - device tree binary",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"hardware layout description"),(0,n.kt)("li",{parentName:"ul"},"platform identification"),(0,n.kt)("li",{parentName:"ul"},"runtime configuration"),(0,n.kt)("li",{parentName:"ul"},"device population"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"arch/<arch>/boot/dts/<board>")),(0,n.kt)("li",{parentName:"ul"},"CONFIG_ARM_APPENDED_DTB - dtb \u5728 kernel \u4e4b\u540e",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"cat zImage board.dtb > my-zImage; mkimage ... -d my-zImage my-uImage")))),(0,n.kt)("li",{parentName:"ul"},"CONFIG_ARM_ATAG_DTB_COMPAT",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"read ATAGS, update DT"))),(0,n.kt)("li",{parentName:"ul"},"Embedded Power Architecture Platform Requirements (ePAPR)"),(0,n.kt)("li",{parentName:"ul"},"Device Tree Source - DTS",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},".dts - board-level definitions",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"\u6700\u7ec8\u7684 - include \u591a\u4e2a dtsi"))),(0,n.kt)("li",{parentName:"ul"},".dtsi - included files, generally containing SoC-level definitions"),(0,n.kt)("li",{parentName:"ul"},"e.g ",(0,n.kt)("a",p({parentName:"li"},{href:"https://github.com/torvalds/linux/tree/master/arch/arm64/boot/dts"}),"arch/arm64/boot/dts")))),(0,n.kt)("li",{parentName:"ul"},"Device Tree Compiler",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://github.com/torvalds/linux/tree/master/scripts/dtc"}),"scripts/dtc")))),(0,n.kt)("li",{parentName:"ul"},"Documentation/devicetree/bindings")),(0,n.kt)("h2",p({},{id:"device-tree-1"}),"Device Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"cpus"),(0,n.kt)("li",{parentName:"ul"},"memory"),(0,n.kt)("li",{parentName:"ul"},"chosen",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"defines parameters chosen or defined by the system firmware at boot time"))),(0,n.kt)("li",{parentName:"ul"},"aliases"),(0,n.kt)("li",{parentName:"ul"},"buses")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-dts"}),'/ {\nmodel = "Freescale i.MX28 Evaluation Kit";\ncompatible = "fsl,imx28-evk", "fsl,imx28";\nmemory {\n  reg = <0x40000000 0x08000000>;\n};\napb@80000000 {\n  apbh@80000000 {  };\n  apbx@80040000 {  };\n};\nahb@80080000 {  };\nsound {  };\nleds {  };\nbacklight {  };\n};\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"of_machine_is_compatible")),(0,n.kt)("h2",p({},{id:"references"}),"References"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Device_tree"}),"Device tree")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://lonzoc.gitbooks.io/device-tree-guide/content/devicetree_basic.html"}),"https://lonzoc.gitbooks.io/device-tree-guide/content/devicetree_basic.html")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://elinux.org/Device_Tree_Reference"}),"https://elinux.org/Device_Tree_Reference")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://elinux.org/Device_Tree_Usage"}),"https://elinux.org/Device_Tree_Usage")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://docs.kernel.org/devicetree/usage-model.html"}),"https://docs.kernel.org/devicetree/usage-model.html")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://www.devicetree.org/"}),"https://www.devicetree.org/")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",p({parentName:"li"},{href:"https://events.static.linuxfound.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf"}),"https://events.static.linuxfound.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"bootloader",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"before device tree - r1=machine_type, r2=ptr to ATAGS"),(0,n.kt)("li",{parentName:"ol"},"boot with device tree - r2=ptr to DTB")))))))}y.isMDXComponent=!0}}]);