"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[30822],{49613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(59496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,g=p["".concat(l,".").concat(h)]||p[h]||m[h]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},31311:function(e,t,n){n.r(t),n.d(t,{assets:function(){return k},contentTitle:function(){return d},default:function(){return y},frontMatter:function(){return g},metadata:function(){return f},toc:function(){return b}});var r=n(49613),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&u(e,n,t[n]);if(c)for(var n of c(t))s.call(t,n)&&u(e,n,t[n]);return e},m=(e,t)=>i(e,o(t)),h=(e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&c)for(var r of c(e))t.indexOf(r)<0&&s.call(e,r)&&(n[r]=e[r]);return n};const g={title:"Gitea Runner"},d="Gitea Runner",f={unversionedId:"service/forge/gitea/gitea-runner",id:"service/forge/gitea/gitea-runner",title:"Gitea Runner",description:"- gitea/actrunner",source:"@site/../notes/service/forge/gitea/gitea-runner.md",sourceDirName:"service/forge/gitea",slug:"/service/forge/gitea/runner",permalink:"/notes/service/forge/gitea/runner",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/forge/gitea/gitea-runner.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1699003495,formattedLastUpdatedAt:"Nov 3, 2023",frontMatter:{title:"Gitea Runner"},sidebar:"docs",previous:{title:"Package",permalink:"/notes/service/forge/gitea/package"},next:{title:"Gitea Version",permalink:"/notes/service/forge/gitea/version"}},k={},b=[{value:"cache",id:"cache",level:2},{value:"Docker",id:"docker",level:2}],N={toc:b},v="wrapper";function y(e){var t=e,{components:n}=t,a=h(t,["components"]);return(0,r.kt)(v,m(p(p({},N),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",p({},{id:"gitea-runner"}),"Gitea Runner"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://gitea.com/gitea/act_runner"}),"gitea/act_runner"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u57fa\u4e8e ",(0,r.kt)("a",p({parentName:"li"},{href:"/notes/service/forge/act"}),"act")),(0,r.kt)("li",{parentName:"ul"},"\u7c7b\u4f3c github action"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://hub.docker.com/r/gitea/act_runner/tags"}),"https://hub.docker.com/r/gitea/act_runner/tags")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/root/.cache/act/")),(0,r.kt)("li",{parentName:"ul"},"\u53c2\u8003",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u4e0b\u8f7d ",(0,r.kt)("a",p({parentName:"li"},{href:"https://dl.gitea.com/act_runner/"}),"https://dl.gitea.com/act_runner/")),(0,r.kt)("li",{parentName:"ul"},"Docs ",(0,r.kt)("a",p({parentName:"li"},{href:"https://docs.gitea.io/en-us/usage/usage/actions/act-runner/"}),"https://docs.gitea.io/en-us/usage/usage/actions/act-runner/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/vegardit/docker-gitea-act-runner"}),"vegardit/docker-gitea-act-runner"))))),(0,r.kt)("admonition",p({},{type:"tip"}),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"\u624b\u52a8\u89e6\u53d1 ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/issues/23668"}),"#23668")),(0,r.kt)("li",{parentName:"ul"},"concurrency ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/issues/24769"}),"#24769")),(0,r.kt)("li",{parentName:"ul"},"cron ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/pull/22751"}),"gitea#22751")),(0,r.kt)("li",{parentName:"ul"},"\u53d8\u91cf\u800c\u4e0d\u662f\u5bc6\u94a5 ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/issues/23763"}),"#23763")),(0,r.kt)("li",{parentName:"ul"},"\u65e5\u5fd7\u6e05\u7406 ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/issues/24256"}),"#24256")),(0,r.kt)("li",{parentName:"ul"},"\u57fa\u4e8e Job \u7684 Token ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/issues/23642"}),"#23642"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"docker login -u ${{github.repository_owner}} -p $GITEA_TOKEN")),(0,r.kt)("li",{parentName:"ul"},"github.actor"))),(0,r.kt)("li",{parentName:"ul"},"\u5916\u90e8 ",(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/go-gitea/gitea/issues/24454"}),"#24454")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u914d\u7f6e Gitea")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-ini",metastring:'title="app.ini"',title:'"app.ini"'}),"[actions]\nENABLED=true\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"https://gitea.example.com/admin/runners")," \u83b7\u53d6 Token")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"docker run --rm -it --entrypoint bash gitea/act_runner:nightly\n\nact_runner generate-config > config.yaml\n\n./act_runner register --instance http://192.168.8.8:3000 --token $TOKEN --no-interactive\n\ndocker run --rm -it \\\n  -e GITEA_INSTANCE_URL=http://192.168.8.18:3000 \\\n  -e GITEA_RUNNER_REGISTRATION_TOKEN=$TOKEN \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v $PWD/data:/data \\\n  --name my_runner gitea/act_runner:nightly\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u9ed8\u8ba4\u7f13\u5b58\u4f4d\u7f6e ~/.cache/actcache/")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-yaml"}),"log:\n  # The level of logging, can be trace, debug, info, warn, error, fatal\n  level: info\n\nrunner:\n  # Where to store the registration result.\n  file: .runner\n  # Execute how many tasks concurrently at the same time.\n  capacity: 1\n  # Extra environment variables to run jobs.\n  envs:\n    A_TEST_ENV_NAME_1: a_test_env_value_1\n    A_TEST_ENV_NAME_2: a_test_env_value_2\n  # Extra environment variables to run jobs from a file.\n  # It will be ignored if it's empty or the file doesn't exist.\n  env_file: .env\n  # The timeout for a job to be finished.\n  # Please note that the Gitea instance also has a timeout (3h by default) for the job.\n  # So the job could be stopped by the Gitea instance if it's timeout is shorter than this.\n  timeout: 3h\n  # Whether skip verifying the TLS certificate of the Gitea instance.\n  insecure: false\n  # The timeout for fetching the job from the Gitea instance.\n  fetch_timeout: 5s\n  # The interval for fetching the job from the Gitea instance.\n  fetch_interval: 2s\n\ncache:\n  # Enable cache server to use actions/cache.\n  enabled: true\n  # The directory to store the cache data.\n  # If it's empty, the cache data will be stored in $HOME/.cache/actcache.\n  dir: ''\n  # The host of the cache server.\n  # It's not for the address to listen, but the address to connect from job containers.\n  # So 0.0.0.0 is a bad choice, leave it empty to detect automatically.\n  host: ''\n  # The port of the cache server.\n  # 0 means to use a random available port.\n  port: 0\n\ncontainer:\n  # Which network to use for the job containers. Could be bridge, host, none, or the name of a custom network.\n  network_mode: bridge\n  # Whether to use privileged mode or not when launching task containers (privileged mode is required for Docker-in-Docker).\n  privileged: false\n  # And other options to be used when the container is started (eg, --add-host=my.gitea.url:host-gateway).\n  options:\n  # The parent directory of a job's working directory.\n  # If it's empty, /workspace will be used.\n  workdir_parent:\n")),(0,r.kt)("h2",p({},{id:"cache"}),"cache"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://docs.gitea.com/next/usage/actions/act-runner"}),"https://docs.gitea.com/next/usage/actions/act-runner"))),(0,r.kt)("h2",p({},{id:"docker"}),"Docker"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"/root/.cache/act")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9ed8\u8ba4 entrypoint")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-bash"}),'#!/usr/bin/env bash\n\nif [[ ! -d /data ]]; then\n  mkdir -p /data\nfi\n\ncd /data\n\nCONFIG_ARG=""\nif [[ ! -z "${CONFIG_FILE}" ]]; then\n  CONFIG_ARG="--config ${CONFIG_FILE}"\nfi\n\n# Use the same ENV variable names as https://github.com/vegardit/docker-gitea-act-runner\n\nif [[ ! -s .runner ]]; then\n  try=$((try + 1))\n  success=0\n\n  # The point of this loop is to make it simple, when running both act_runner and gitea in docker,\n  # for the act_runner to wait a moment for gitea to become available before erroring out.  Within\n  # the context of a single docker-compose, something similar could be done via healthchecks, but\n  # this is more flexible.\n  while [[ $success -eq 0 ]] && [[ $try -lt ${GITEA_MAX_REG_ATTEMPTS:-10} ]]; do\n    act_runner register \\\n      --instance "${GITEA_INSTANCE_URL}" \\\n      --token "${GITEA_RUNNER_REGISTRATION_TOKEN}" \\\n      --name "${GITEA_RUNNER_NAME:-$(hostname)}" \\\n      --labels "${GITEA_RUNNER_LABELS}" \\\n      ${CONFIG_ARG} --no-interactive > /tmp/reg.log 2>&1\n\n    cat /tmp/reg.log\n\n    cat /tmp/reg.log | grep \'Runner registered successfully\' > /dev/null\n    if [[ $? -eq 0 ]]; then\n      echo "SUCCESS"\n      success=1\n    else\n      echo "Waiting to retry ..."\n      sleep 5\n    fi\n  done\nfi\n# Prevent reading the token from the act_runner process\nunset GITEA_RUNNER_REGISTRATION_TOKEN\n\nact_runner daemon ${CONFIG_ARG}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json",metastring:'title="/data/.runner"',title:'"/data/.runner"'}),'{\n  "WARNING": "This file is automatically generated by act-runner. Do not edit it manually unless you know what you are doing. Removing this file will cause act runner to re-register as a new runner.",\n  "id": 1,\n  "uuid": "",\n  "name": "gitea-runner-0",\n  "token": "",\n  "address": "http://gitea",\n  "labels": [\n    "ubuntu-latest:docker://node:16-bullseye",\n    "ubuntu-22.04:docker://node:16-bullseye",\n    "ubuntu-20.04:docker://node:16-bullseye",\n    "ubuntu-18.04:docker://node:16-buster"\n  ]\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),"GITEA_RUNNER_LABELS=ubuntu-latest:docker://node:16-bullseye,ubuntu-22.04:docker://node:16-bullseye,ubuntu-20.04:docker://node:16-bullseye,ubuntu-18.04:docker://node:16-buster\n")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),"GITEA_RUNNER_LABELS=ubuntu-latest:docker://wener/node:18,alpine-latest:docker://wener/node:18,alpine-exec:host\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://github.com/nektos/act/blob/master/IMAGES.md"}),"https://github.com/nektos/act/blob/master/IMAGES.md"))),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),"cloning https://gitea.com/actions/setup-node to /root/.cache/act/actions-setup-node@v3\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"https://gitea.com/actions"}),"https://gitea.com/actions"))))}y.isMDXComponent=!0}}]);