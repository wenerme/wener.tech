"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[29204],{49613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(59496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,m=p["".concat(s,".").concat(h)]||p[h]||f[h]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},66678:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return h},default:function(){return v},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return g}});var r=n(49613),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,f=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&u(e,n,t[n]);if(c)for(var n of c(t))l.call(t,n)&&u(e,n,t[n]);return e};const p={title:"Gitea Action"},h="Gitea Action",m={unversionedId:"service/forge/gitea/gitea-action",id:"service/forge/gitea/gitea-action",title:"Gitea Action",description:"- gitea/actrunner",source:"@site/../notes/service/forge/gitea/gitea-action.md",sourceDirName:"service/forge/gitea",slug:"/service/forge/gitea/action",permalink:"/notes/service/forge/gitea/action",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/forge/gitea/gitea-action.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1684216634,formattedLastUpdatedAt:"May 16, 2023",frontMatter:{title:"Gitea Action"},sidebar:"docs",previous:{title:"Gitea",permalink:"/notes/service/forge/gitea/"},next:{title:"\u914d\u7f6e",permalink:"/notes/service/forge/gitea/conf"}},d={},g=[],b={toc:g};function v(e){var t,n=e,{components:a}=n,u=((e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&c)for(var r of c(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=f(f({},b),u),o(t,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",f({},{id:"gitea-action"}),"Gitea Action"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",f({parentName:"li"},{href:"https://gitea.com/gitea/act_runner"}),"gitea/act_runner"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u914d\u7f6e Gitea")),(0,r.kt)("pre",null,(0,r.kt)("code",f({parentName:"pre"},{className:"language-ini",metastring:'title="app.ini"',title:'"app.ini"'}),"[actions]\nENABLED=true\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"https://gitea.example.com/admin/runners")," \u83b7\u53d6 Token")),(0,r.kt)("pre",null,(0,r.kt)("code",f({parentName:"pre"},{className:"language-bash"}),"docker run --rm -it --entrypoint bash gitea/act_runner:nightly\n\nact_runner generate-config > config.yaml\n\n./act_runner register --instance http://192.168.8.8:3000 --token $TOKEN --no-interactive\n\ndocker run --rm -it \\\n  -e GITEA_INSTANCE_URL=http://192.168.8.18:3000 \\\n  -e GITEA_RUNNER_REGISTRATION_TOKEN=$TOKEN \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v $PWD/data:/data \\\n  --name my_runner gitea/act_runner:nightly\n")),(0,r.kt)("pre",null,(0,r.kt)("code",f({parentName:"pre"},{className:"language-yaml"}),"log:\n  # The level of logging, can be trace, debug, info, warn, error, fatal\n  level: info\n\nrunner:\n  # Where to store the registration result.\n  file: .runner\n  # Execute how many tasks concurrently at the same time.\n  capacity: 1\n  # Extra environment variables to run jobs.\n  envs:\n    A_TEST_ENV_NAME_1: a_test_env_value_1\n    A_TEST_ENV_NAME_2: a_test_env_value_2\n  # Extra environment variables to run jobs from a file.\n  # It will be ignored if it's empty or the file doesn't exist.\n  env_file: .env\n  # The timeout for a job to be finished.\n  # Please note that the Gitea instance also has a timeout (3h by default) for the job.\n  # So the job could be stopped by the Gitea instance if it's timeout is shorter than this.\n  timeout: 3h\n  # Whether skip verifying the TLS certificate of the Gitea instance.\n  insecure: false\n  # The timeout for fetching the job from the Gitea instance.\n  fetch_timeout: 5s\n  # The interval for fetching the job from the Gitea instance.\n  fetch_interval: 2s\n\ncache:\n  # Enable cache server to use actions/cache.\n  enabled: true\n  # The directory to store the cache data.\n  # If it's empty, the cache data will be stored in $HOME/.cache/actcache.\n  dir: ''\n  # The host of the cache server.\n  # It's not for the address to listen, but the address to connect from job containers.\n  # So 0.0.0.0 is a bad choice, leave it empty to detect automatically.\n  host: ''\n  # The port of the cache server.\n  # 0 means to use a random available port.\n  port: 0\n\ncontainer:\n  # Which network to use for the job containers. Could be bridge, host, none, or the name of a custom network.\n  network_mode: bridge\n  # Whether to use privileged mode or not when launching task containers (privileged mode is required for Docker-in-Docker).\n  privileged: false\n  # And other options to be used when the container is started (eg, --add-host=my.gitea.url:host-gateway).\n  options:\n  # The parent directory of a job's working directory.\n  # If it's empty, /workspace will be used.\n  workdir_parent:\n")))}v.isMDXComponent=!0}}]);