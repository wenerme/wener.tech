"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[50664],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,h=p["".concat(l,".").concat(f)]||p[f]||u[f]||i;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},86287:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),s=["components"],o={title:"Asterisk CDR"},l=void 0,c={unversionedId:"voip/asterisk/asterisk-cdr",id:"voip/asterisk/asterisk-cdr",isDocsHomePage:!1,title:"Asterisk CDR",description:"- CDR - Call Detail Record - \u901a\u8bdd\u8bb0\u5f55",source:"@site/notes/voip/asterisk/asterisk-cdr.md",sourceDirName:"voip/asterisk",slug:"/voip/asterisk/asterisk-cdr",permalink:"/notes/voip/asterisk/asterisk-cdr",editUrl:"https://github.com/wenerme/wener/edit/master/notes/voip/asterisk/asterisk-cdr.md",tags:[],version:"current",frontMatter:{title:"Asterisk CDR"},sidebar:"docs",previous:{title:"Build Asterisk",permalink:"/notes/voip/asterisk/asterisk-build"},next:{title:"Asterisk \u914d\u7f6e",permalink:"/notes/voip/asterisk/asterisk-conf"}},d=[{value:"cdr.conf",id:"cdrconf",children:[{value:"\u540e\u7aef",id:"\u540e\u7aef",children:[]}]},{value:"sqlite3",id:"sqlite3",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CDR - Call Detail Record - \u901a\u8bdd\u8bb0\u5f55")),(0,i.kt)("h2",{id:"cdrconf"},"cdr.conf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},"[general]\nenable=yes\n\n; \u672a\u54cd\u5e94\u7684\u547c\u53eb\u662f\u5426\u8bb0\u5f55\n; \u672a\u54cd\u5e94 - \u6ca1\u6709\u8bbe\u7f6e B \u7aef\u901a\u9053 \u4f8b\u5982\u6ca1\u6709 Dial\n; \u9ed8\u8ba4 no\nunanswered = yes\n; \u662f\u5426\u8bb0\u5f55 \u62e5\u585e/congested \u547c\u53eb\n; \u9ed8\u8ba4 no\ncongestion = yes\n\n; \u9ed8\u8ba4\u5728\u8fd0\u884c\u5b8c extension \u540e\u8bb0\u5f55 cdr\n;endbeforehexten=no\n\n; billsec=end/hangup time - answer time\n; \u9ed8\u8ba4\u8bb0\u5f55\u4e3a\u79d2\uff0c\u5185\u90e8\u8bb0\u5f55\u4e3a \u79d2+ms\uff0c\u8bbe\u7f6e\u4e3a yes \u5219 Math.ceil\n;initiatedseconds=no\n\n; \u6279\u91cf\u5199\u5165 - \u53ef\u80fd\u4f1a\u4e22\u5931 cdr\n;batch=no\n; \u6279\u91cf\u7d2f\u8ba1\u5927\u5c0f\n;size=100\n; \u6279\u91cf\u7d2f\u8ba1\u65f6\u95f4 - \u5355\u4f4d \u79d2\n;time=300\n; \u6279\u91cf\u63d0\u4ea4\u65b9\u5f0f\n; \u5c0f\u6279\u91cf(size<10) \u53ef\u8bbe\u7f6e\u4e3a yes \u76f4\u63a5\u5728 scheduler \u7ebf\u7a0b\u63d0\u4ea4\n; \u5927\u6279\u91cf\u8bbe\u7f6e\u4e3a no \u5728\u65b0\u7ebf\u7a0b\u63d0\u4ea4\n;scheduleronly=no\n; \u505c\u6b62 asterisk \u65f6\u5148\u5199\u5165 cdr - cdr status \u53ef\u67e5\u770b\u8fdb\u5ea6\n;safeshutdown=yes\n")),(0,i.kt)("h3",{id:"\u540e\u7aef"},"\u540e\u7aef"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u652f\u6301\u540e\u7aef csv, custom, manager, odbc, pgsql, radius, sqlite, tds, mysql")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},'; Some of the modules required to provide these backends will not build or install\n; unless some dependency requirements are met. Examples of this are pgsql, odbc,\n; etc. If you are not getting output as you would expect, the first thing to do\n; is to run the command "make menuselect", and check what modules are available,\n; by looking in the "2. Call Detail Recording" option in the main menu. If your\n; backend is marked with XXX, you know that the "configure" command could not find\n; the required libraries for that option.\n;\n; To get CDRs to be logged to the plain-jane /var/log/asterisk/cdr-csv/Master.csv\n; file, define the [csv] category in this file. No database necessary. The example\n; config files are set up to provide this kind of output by default.\n;\n; To get custom csv CDR records, make sure the cdr_custom.conf file\n; is present, and contains the proper [mappings] section. The advantage to\n; using this backend, is that you can define which fields to output, and in\n; what order. By default, the example configs are set up to mimic the cdr-csv\n; output. If you don\'t make any changes to the mappings, you are basically generating\n; the same thing as cdr-csv, but expending more CPU cycles to do so!\n;\n; To get manager events generated, make sure the cdr_manager.conf file exists,\n; and the [general] section is defined, with the single variable \'enabled = yes\'.\n;\n; For odbc, make sure all the proper libs are installed, that "make menuselect"\n; shows that the modules are available, and the cdr_odbc.conf file exists, and\n; has a [global] section with the proper variables defined.\n;\n; For pgsql, make sure all the proper libs are installed, that "make menuselect"\n; shows that the modules are available, and the cdr_pgsql.conf file exists, and\n; has a [global] section with the proper variables defined.\n;\n; For logging to radius databases, make sure all the proper libs are installed, that\n; "make menuselect" shows that the modules are available, and the [radius]\n; category is defined in this file, and in that section, make sure the \'radiuscfg\'\n; variable is properly pointing to an existing radiusclient.conf file.\n;\n; For logging to sqlite databases, make sure the \'cdr.db\' file exists in the log directory,\n; which is usually /var/log/asterisk. Of course, the proper libraries should be available\n; during the \'configure\' operation.\n;\n; For tds logging, make sure the proper libraries are available during the \'configure\'\n; phase, and that cdr_tds.conf exists and is properly set up with a [global] category.\n;\n; Also, remember, that if you wish to log CDR info to a database, you will have to define\n; a specific table in that databse to make things work! See the doc directory for more details\n; on how to create this table in each database.\n;\n\n[csv]\nusegmtime=yes    ; log date/time in GMT.  Default is "no"\nloguniqueid=yes  ; log uniqueid.  Default is "no"\nloguserfield=yes ; log user field.  Default is "no"\naccountlogs=yes  ; create separate log file for each account code. Default is "yes"\n;newcdrcolumns=yes ; Enable logging of post-1.8 CDR columns (peeraccount, linkedid, sequence).\n                   ; Default is "no".\n\n;[radius]\n;usegmtime=yes    ; log date/time in GMT\n;loguniqueid=yes  ; log uniqueid\n;loguserfield=yes ; log user field\n; Set this to the location of the radiusclient-ng configuration file\n; The default is /etc/radiusclient-ng/radiusclient.conf\n;radiuscfg => /usr/local/etc/radiusclient-ng/radiusclient.conf\n')),(0,i.kt)("h2",{id:"sqlite3"},"sqlite3"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},"; /var/log/asterisk/master.db\n[master]\ntable => cdr\ncolumns => calldate, clid, dcontext, channel, dstchannel, lastapp, lastdata, duration, billsec, disposition, amaflags, accountcode, uniqueid, userfield, test\nvalues => '${CDR(start)}','${CDR(clid)}','${CDR(dcontext)}','${CDR(channel)}','${CDR(dstchannel)}','${CDR(lastapp)}','${CDR(lastdata)}','${CDR(duration)}','${CDR(billsec)}','${CDR(disposition)}','${CDR(amaflags)}','${CDR(accountcode)}','${CDR(uniqueid)}','${CDR(userfield)}','${CDR(test)}'\nbusy_timeout => 1000\n")))}p.isMDXComponent=!0}}]);