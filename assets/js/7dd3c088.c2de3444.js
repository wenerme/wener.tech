"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[40248],{49613:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(59496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(r),f=a,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||o;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},16694:function(e,t,r){r.r(t),r.d(t,{assets:function(){return b},contentTitle:function(){return w},default:function(){return g},frontMatter:function(){return m},metadata:function(){return y},toc:function(){return h}});var n=r(49613),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&d(e,r,t[r]);if(c)for(var r of c(t))s.call(t,r)&&d(e,r,t[r]);return e},u=(e,t)=>o(e,i(t)),f=(e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&c)for(var n of c(e))t.indexOf(n)<0&&s.call(e,n)&&(r[n]=e[n]);return r};const m={title:"wayback-machine-downloader"},w=void 0,y={unversionedId:"service/data/crawler/wayback-machine-downloader",id:"service/data/crawler/wayback-machine-downloader",title:"wayback-machine-downloader",description:"wayback-machine-downloader",source:"@site/../notes/service/data/crawler/wayback-machine-downloader.md",sourceDirName:"service/data/crawler",slug:"/service/data/crawler/wayback-machine-downloader",permalink:"/notes/service/data/crawler/wayback-machine-downloader",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/data/crawler/wayback-machine-downloader.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1629271390,formattedLastUpdatedAt:"Aug 18, 2021",frontMatter:{title:"wayback-machine-downloader"},sidebar:"docs",previous:{title:"WARC",permalink:"/notes/service/data/crawler/warc"},next:{title:"Wayback Machine",permalink:"/notes/service/data/crawler/wayback-machine"}},b={},h=[{value:"wayback-machine-downloader",id:"wayback-machine-downloader",level:2}],v={toc:h},O="wrapper";function g(e){var t=e,{components:r}=t,a=f(t,["components"]);return(0,n.kt)(O,u(p(p({},v),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h2",p({},{id:"wayback-machine-downloader"}),"wayback-machine-downloader"),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{className:"language-bash"}),"# \u56fd\u5185\u9700\u8981\u5f00\u542f\u4ee3\u7406\ndocker run --rm -it \\\n  -v $PWD/websites:/websites \\\n  -e http_proxy=http://192.168.1.1:8080 \\\n  -e https_proxy=http://192.168.1.1:8080 \\\n  hartator/wayback-machine-downloader http://example.com\n")),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{}),'--only "/\\.(gif|jpg|jpeg)$/i"\n--only "/[^/]+/album$/i"\n-c 4\n# \u4e0b\u8f7d list \u4e3a JSON\n--list\n')),(0,n.kt)("pre",null,(0,n.kt)("code",p({parentName:"pre"},{}),"-d, --directory PATH             Directory to save the downloaded files into\n                                 Default is ./websites/ plus the domain name\n-s, --all-timestamps             Download all snapshots/timestamps for a given website\n-f, --from TIMESTAMP             Only files on or after timestamp supplied (ie. 20060716231334)\n-t, --to TIMESTAMP               Only files on or before timestamp supplied (ie. 20100916231334)\n-e, --exact-url                  Download only the url provied and not the full site\n-o, --only ONLY_FILTER           Restrict downloading to urls that match this filter\n                                 (use // notation for the filter to be treated as a regex)\n-x, --exclude EXCLUDE_FILTER     Skip downloading of urls that match this filter\n                                 (use // notation for the filter to be treated as a regex)\n-a, --all                        Expand downloading to error files (40x and 50x) and redirections (30x)\n-c, --concurrency NUMBER         Number of multiple files to download at a time\n                                 Default is one file at a time (ie. 20)\n-p, --maximum-snapshot NUMBER    Maximum snapshot pages to consider (Default is 100)\n                                 Count an average of 150,000 snapshots per page\n-l, --list                       Only list file urls in a JSON format with the archived timestamps, won't download anything\n")))}g.isMDXComponent=!0}}]);