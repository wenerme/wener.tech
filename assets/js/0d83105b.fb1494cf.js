/*! For license information please see 0d83105b.fb1494cf.js.LICENSE.txt */
"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[9546],{11748:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(2488),o=t(62780);const r={id:"dex"},i="Dex",a={id:"service/auth/dex",title:"Dex",description:"- \u662f\u4ec0\u4e48\uff1f",source:"@site/../notes/service/auth/dex.md",sourceDirName:"service/auth",slug:"/service/auth/dex",permalink:"/notes/service/auth/dex",draft:!1,unlisted:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/auth/dex.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1633860901,formattedLastUpdatedAt:"Oct 10, 2021",frontMatter:{id:"dex"},sidebar:"docs",previous:{title:"spicedb",permalink:"/notes/service/auth/authz/spicedb"},next:{title:"Hydra",permalink:"/notes/service/auth/hydra"}},l={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"dex",children:"Dex"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u662f\u4ec0\u4e48\uff1f\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"OIDC, OAuth2 Provider - IdP"}),"\n",(0,s.jsx)(n.li,{children:"\u652f\u6301\u63d2\u4ef6\u5f0f\u7684 Connector"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\u5b58\u50a8\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"sqlite3, mysql, postgres"}),"\n",(0,s.jsx)(n.li,{children:"etcd"}),"\n",(0,s.jsxs)(n.li,{children:["kubernetes - CRD\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u76f8\u5f53\u4e8e\u65e0\u72b6\u6001\u90e8\u7f72"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"\u53ef\u4f5c\u4e3a\u5d4c\u5165\u4f7f\u7528"}),"\n",(0,s.jsxs)(n.li,{children:["\u652f\u6301 ",(0,s.jsx)(n.a,{href:"https://dexidp.io/docs/kubernetes/",children:"Kubernetes \u6388\u6743"})," \u662f\u6838\u5fc3\u573a\u666f"]}),"\n",(0,s.jsxs)(n.li,{children:["Connector\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"LDAP, GitHub, SAML2.0, Gitlab, OpenID Connect, Google, LinkedIn, Microsoft, AuthProxy, Gitea"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"go get github.com/dexidp/dex/cmd/dex\n\ndex serve config-dev.yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"config-dev.yaml"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# dex \u670d\u52a1\u5730\u5740\nissuer: http://127.0.0.1:5556/dex\n\n# \u5b58\u50a8\u914d\u7f6e\nstorage:\n  type: sqlite3\n  config:\n    file: examples/dex.db\n\n  # type: mysql\n  # config:\n  #   host: localhost\n  #   port: 3306\n  #   database: dex\n  #   user: mysql\n  #   password: mysql\n  #   ssl:\n  #     mode: "false"\n\n  # type: postgres\n  # config:\n  #   host: localhost\n  #   port: 5432\n  #   database: dex\n  #   user: postgres\n  #   password: postgres\n  #   ssl:\n  #     mode: disable\n\n  # type: etcd\n  # config:\n  #   endpoints:\n  #     - http://localhost:2379\n  #   namespace: dex/\n\n  # type: kubernetes\n  # config:\n  #   kubeConfigFile: $HOME/.kube/config\n\n# HTTP \u5730\u5740\nweb:\n  http: 0.0.0.0:5556\n  # Uncomment for HTTPS options.\n  # https: 127.0.0.1:5554\n  # tlsCert: /etc/dex/tls.crt\n  # tlsKey: /etc/dex/tls.key\n\n# Configuration for telemetry\ntelemetry:\n  http: 0.0.0.0:5558\n\n# GRPC \u63a5\u53e3\n# grpc:\n#   addr: 127.0.0.1:5557\n#  tlsCert: examples/grpc-client/server.crt\n#  tlsKey: examples/grpc-client/server.key\n#  tlsClientCA: /etc/dex/client.crt\n\n# \u5931\u6548\u63a7\u5236\n# expiry:\n#   deviceRequests: "5m"\n#   signingKeys: "6h"\n#   idTokens: "24h"\n\n# Options for controlling the logger.\n# logger:\n#   level: "debug"\n#   format: "text" # can also be "json"\n\n# Default values shown below\n# oauth2:\n# use ["code", "token", "id_token"] to enable implicit flow for web-only clients\n#   responseTypes: [ "code" ] # also allowed are "token" and "id_token"\n# By default, Dex will ask for approval to share data with application\n# (approval for sharing data from connected IdP to Dex is separate process on IdP)\n#   skipApprovalScreen: false\n# If only one authentication method is enabled, the default behavior is to\n# go directly to it. For connected IdPs, this redirects the browser away\n# from application to upstream provider such as the Google login page\n#   alwaysShowLoginScreen: false\n# Uncommend the passwordConnector to use a specific connector for password grants\n#   passwordConnector: local\n\n# Instead of reading from an external storage, use this list of clients.\n#\n# If this option isn\'t chosen clients may be added through the gRPC API.\nstaticClients:\n  - id: example-app\n    redirectURIs:\n      - \'http://127.0.0.1:5555/callback\'\n    name: \'Example App\'\n    secret: ZXhhbXBsZS1hcHAtc2VjcmV0\n#  - id: example-device-client\n#    redirectURIs:\n#      - /device/callback\n#    name: \'Static Client for Device Flow\'\n#    public: true\nconnectors:\n  - type: mockCallback\n    id: mock\n    name: Example\n# - type: google\n#   id: google\n#   name: Google\n#   config:\n#     issuer: https://accounts.google.com\n#     # Connector config values starting with a "$" will read from the environment.\n#     clientID: $GOOGLE_CLIENT_ID\n#     clientSecret: $GOOGLE_CLIENT_SECRET\n#     redirectURI: http://127.0.0.1:5556/dex/callback\n#     hostedDomains:\n#     - $GOOGLE_HOSTED_DOMAIN\n\n# Let dex keep a list of passwords which can be used to login to dex.\nenablePasswordDB: true\n\n# A static list of passwords to login the end user. By identifying here, dex\n# won\'t look in its underlying storage for passwords.\n#\n# If this option isn\'t chosen users may be added through the gRPC API.\nstaticPasswords:\n  - email: \'admin@example.com\'\n    # bcrypt hash of the string "password"\n    hash: \'$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W\'\n    username: \'admin\'\n    userID: \'08a8684b-db88-4b73-90a9-3cd1661f5466\'\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},38088:(e,n,t)=>{var s=t(96651),o=Symbol.for("react.element"),r=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,a=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var s,r={},c=null,d=null;for(s in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(d=n.ref),n)i.call(n,s)&&!l.hasOwnProperty(s)&&(r[s]=n[s]);if(e&&e.defaultProps)for(s in n=e.defaultProps)void 0===r[s]&&(r[s]=n[s]);return{$$typeof:o,type:e,key:c,ref:d,props:r,_owner:a.current}}n.Fragment=r,n.jsx=c,n.jsxs=c},2488:(e,n,t)=>{e.exports=t(38088)},62780:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>i});var s=t(96651);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);