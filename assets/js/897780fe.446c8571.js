"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[52694],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},u=Object.keys(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,u=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=c(r),f=o,k=b["".concat(l,".").concat(f)]||b[f]||p[f]||u;return r?n.createElement(k,a(a({ref:t},s),{},{components:r})):n.createElement(k,a({ref:t},s))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=r.length,a=new Array(u);a[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<u;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},71636:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return b}});var n=r(87462),o=r(63366),u=(r(67294),r(3905)),a=["components"],i={title:"kube-router"},l=void 0,c={unversionedId:"devops/kubernetes/network/kube-router",id:"devops/kubernetes/network/kube-router",title:"kube-router",description:"- cloudnativelabs/kube-router",source:"@site/notes/devops/kubernetes/network/kube-router.md",sourceDirName:"devops/kubernetes/network",slug:"/devops/kubernetes/network/kube-router",permalink:"/notes/devops/kubernetes/network/kube-router",editUrl:"https://github.com/wenerme/wener/edit/master/notes/devops/kubernetes/network/kube-router.md",tags:[],version:"current",frontMatter:{title:"kube-router"},sidebar:"docs",previous:{title:"Kong Ingress",permalink:"/notes/devops/kubernetes/network/kong-ingress"},next:{title:"MetalLB",permalink:"/notes/devops/kubernetes/network/metallb"}},s=[],p={toc:s};function b(e){var t=e.components,r=(0,o.Z)(e,a);return(0,u.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/cloudnativelabs/kube-router"},"cloudnativelabs/kube-router"),(0,u.kt)("ul",{parentName:"li"},(0,u.kt)("li",{parentName:"ul"},"LVS/IPVS service proxy - IPVS+IPTables"),(0,u.kt)("li",{parentName:"ul"},"Pod Networking - Router Controller - GoBGP+routing"),(0,u.kt)("li",{parentName:"ul"},"Network Policy Controller - IPTables+IPSet"),(0,u.kt)("li",{parentName:"ul"},"BGP")))))}b.isMDXComponent=!0}}]);