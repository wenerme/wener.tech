"use strict";(self.webpackChunkwener_website=self.webpackChunkwener_website||[]).push([[53356],{49613:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return f}});var r=t(59496);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,l=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),d=s(t),f=i,E=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(E,c(c({ref:e},p),{},{components:t})):r.createElement(E,c({ref:e},p))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,c=new Array(o);c[0]=d;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a.mdxType="string"==typeof n?n:i,c[1]=a;for(var s=2;s<o;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70512:function(n,e,t){t.r(e),t.d(e,{assets:function(){return N},contentTitle:function(){return f},default:function(){return v},frontMatter:function(){return d},metadata:function(){return E},toc:function(){return m}});var r=t(49613),i=Object.defineProperty,o=Object.defineProperties,c=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,p=(n,e,t)=>e in n?i(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,u=(n,e)=>{for(var t in e||(e={}))l.call(e,t)&&p(n,t,e[t]);if(a)for(var t of a(e))s.call(e,t)&&p(n,t,e[t]);return n};const d={title:"tinc 1.0"},f="tinc 1.0",E={unversionedId:"service/network/tinc/tinc-1.0",id:"service/network/tinc/tinc-1.0",title:"tinc 1.0",description:"- \u53ea\u6709 tincd",source:"@site/../notes/service/network/tinc/tinc-1.0.md",sourceDirName:"service/network/tinc",slug:"/service/network/tinc/1.0",permalink:"/notes/service/network/tinc/1.0",draft:!1,editUrl:"https://github.com/wenerme/wener/edit/master/notes/../notes/service/network/tinc/tinc-1.0.md",tags:[],version:"current",lastUpdatedBy:"wener",lastUpdatedAt:1678453938,formattedLastUpdatedAt:"Mar 10, 2023",frontMatter:{title:"tinc 1.0"},sidebar:"docs",previous:{title:"Tinc",permalink:"/notes/service/network/tinc/"},next:{title:"Tinc \u914d\u7f6e",permalink:"/notes/service/network/tinc/conf"}},N={},m=[{value:"init",id:"init",level:2}],O={toc:m};function v(n){var e,t=n,{components:i}=t,p=((n,e)=>{var t={};for(var r in n)l.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(null!=n&&a)for(var r of a(n))e.indexOf(r)<0&&s.call(n,r)&&(t[r]=n[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(e=u(u({},O),p),o(e,c({components:i,mdxType:"MDXLayout"}))),(0,r.kt)("h1",u({},{id:"tinc-10"}),"tinc 1.0"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u53ea\u6709 tincd")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"NETNAME=netname\nNODE=NodeA\nmkdir -p /etc/tinc/$NETNAME/hosts\n# tinc.conf\ncat << CONF > /etc/tinc/$NETNAME/tinc.conf\nName = $NODE\nMode = switch\n# ConnectTo = $NETANAME\nCONF\n\n# \u751f\u6210 key\ntincd -n $NETNAME -K\n\n# tinc-up\ncat << SH > /etc/tinc/$NETNAME/tinc-up\nifconfig $INTERFACE 10.10.1.1 netmask 255.0.0.0\nSH\n\n# \u968f\u673a port\ncat << CONF > /etc/tinc/$NETNAME/hosts/$NODE\nPort = 0\nCONF\n\n# \u6dfb\u52a0\u5176\u4ed6\u8282\u70b9\ncat << CONF > /etc/tinc/$NETNAME/hosts/$NETNAME\n# Subnet = 10.10.0.0/24\nAddress = 4.5.6.7\n\n-----BEGIN RSA PUBLIC KEY-----\n...\n-----END RSA PUBLIC KEY-----\nCONF\n\ntincd -n $NETNAME -Dd 5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{}),"  -c, --config=DIR               Read configuration options from DIR.\n  -D, --no-detach                Don't fork and detach.\n  -d, --debug[=LEVEL]            Increase debug level or set it to LEVEL.\n  -k, --kill[=SIGNAL]            Attempt to kill a running tincd and exit.\n  -n, --net=NETNAME              Connect to net NETNAME.\n  -K, --generate-keys[=BITS]     Generate public/private RSA keypair.\n  -L, --mlock                    Lock tinc into main memory.\n      --logfile[=FILENAME]       Write log entries to a logfile.\n      --pidfile=FILENAME         Write PID to FILENAME.\n  -o, --option=[HOST.]KEY=VALUE  Set global/host configuration value.\n  -R, --chroot                   chroot to NET dir at startup.\n  -U, --user=USER                setuid to given USER at startup.\n      --help                     Display this help and exit.\n      --version                  Output version information and exit.\n")),(0,r.kt)("h2",u({},{id:"init"}),"init"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"https://www.tinc-vpn.org/documentation/tinc.conf.5"}),"tinc.conf.5"))),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-bash"}),"export NETWORK=kubenet\nNODENAME=$(hostname | tr - _)\n\nmodprobe tun\n\nmkdir -p /etc/tinc/$NETWORK/hosts\ncd /etc/tinc/$NETWORK\n\ntincd -n $NETWORK -K 4096\ncat << CONF > tinc.conf\nName=$NODENAME\nMode=switch\nDevice = /dev/net/tun\nAddressFamily = ipv4\nCONF\n\ncat << 'SHELL' > tinc-up\nip link set $INTERFACE up\nip addr add 10.10.1.1 dev $INTERFACE\nip route add 10.10.1.0/24 dev $INTERFACE\nSHELL\ncat << 'SHELL' > tinc-down\nip link set $INTERFACE down\nSHELL\nchmod -v +x tinc-up tinc-down\n\ncp rsa_key.pub hosts/$NODENAME.rsa_key.pub\ncat << CONF > hosts/$NODENAME\nPublicKeyFile=$NODENAME.rsa_key.pub\nCONF\n\n# \u524d\u53f0\u542f\u52a8 - debug\ntincd -n $NETWORK -Dd 5\n\n# \u670d\u52a1\u542f\u52a8\necho \"NETWORK: $NETWORK\" >> /etc/conf.d/tinc.networks\nservice tincd start\n")))}v.isMDXComponent=!0}}]);