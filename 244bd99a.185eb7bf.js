(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{1129:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),c=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var u=c.a.createContext({}),s=function(e){var n=c.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return c.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},d=c.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=r,f=p["".concat(o,".").concat(d)]||p[d]||b[d]||a;return t?c.a.createElement(f,i(i({ref:n},u),{},{components:t})):c.a.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},231:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(3),c=t(8),a=(t(0),t(1129)),o={title:"C Build"},i={unversionedId:"languages/c/c-build",id:"languages/c/c-build",isDocsHomePage:!1,title:"C Build",description:"`bash",source:"@site/notes/languages/c/c-build.md",slug:"/languages/c/c-build",permalink:"/notes/languages/c/c-build",editUrl:"https://github.com/wenerme/wener/edit/master/notes/languages/c/c-build.md",version:"current",sidebar:"docs",previous:{title:"ARM Build",permalink:"/notes/languages/c/arm-build"},next:{title:"gcc",permalink:"/notes/languages/c/gcc"}},l=[{value:"\u7f16\u8bd1\u8fc7\u7a0b",id:"\u7f16\u8bd1\u8fc7\u7a0b",children:[]}],u={toc:l};function s(e){var n=e.components,t=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"gcc main.c -static\n\n\necho 'int main(){}' > test.c\ngcc -o test test.c\nfile test\n\nCC=arm-linux-gnueabi-gcc\necho 'int main(){}' > test.c\n# ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a839e1b10daec5d9c348eef8854bb271f8097d34, not stripped\n# \u6ce8\u610f GNU/Linux 3.2.0\n$CC -o test test.c\nfile test\n")),Object(a.b)("h2",{id:"\u7f16\u8bd1\u8fc7\u7a0b"},"\u7f16\u8bd1\u8fc7\u7a0b"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"          |\n          |----\x3e  Input is Source file(.c)\n          |\n          V\n+=================+\n|                 |\n| C Preprocessor  |\n|                 |\n+=================+\n          |\n          | ---\x3e Pure C file ( comd:cc -E <file.name> )\n          |\n          V\n+=================+\n|                 |\n| Lexical Analyzer|\n|                 |\n+-----------------+\n|                 |\n| Syntax Analyzer |\n|                 |\n+-----------------+\n|                 |\n| Semantic Analyze|\n|                 |\n+-----------------+\n|                 |\n| Pre Optimization|\n|                 |\n+-----------------+\n|                 |\n| Code generation |\n|                 |\n+-----------------+\n|                 |\n| Post Optimize   |\n|                 |\n+=================+\n          |\n          |---\x3e  Assembly code (comd: cc -S <file.name> )\n          |\n          V\n+=================+\n|                 |\n|   Assembler     |\n|                 |\n+=================+\n          |\n          |---\x3e  Object file (.obj) (comd: cc -c <file.name>)\n          |\n          V\n+=================+\n|     Linker      |\n|      and        |\n|     loader      |\n+=================+\n          |\n          |---\x3e  Executable (.Exe/a.out) (com:cc <file.name> )\n          |\n          V\nExecutable file(a.out)\n")))}s.isMDXComponent=!0}}]);