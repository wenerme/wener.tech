(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{1083:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),u=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,m=d["".concat(r,".").concat(p)]||d[p]||h[p]||s;return t?i.a.createElement(m,o(o({ref:n},c),{},{components:t})):i.a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<s;c++)r[c]=t[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},259:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(3),i=t(8),s=(t(0),t(1083)),r={title:"chan_iax"},o={unversionedId:"voip/asterisk/chan_iax",id:"voip/asterisk/chan_iax",isDocsHomePage:!1,title:"chan_iax",description:"- IAX - Inter-Asterisk-eXchange",source:"@site/notes/voip/asterisk/chan_iax.md",slug:"/voip/asterisk/chan_iax",permalink:"/notes/voip/asterisk/chan_iax",editUrl:"https://github.com/wenerme/wener/edit/master/notes/voip/asterisk/chan_iax.md",version:"current",sidebar:"docs",previous:{title:"chan_extra",permalink:"/notes/voip/asterisk/chan_extra"},next:{title:"chan_pjsip",permalink:"/notes/voip/asterisk/chan_pjsip"}},l=[{value:"iax.conf",id:"iaxconf",children:[]}],c={toc:l};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"IAX - Inter-Asterisk-eXchange",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"\u5355 TCP \u652f\u6301\u591a\u7ebf\u8def"),Object(s.b)("li",{parentName:"ul"},"\u65e9\u671f\u7528\u4e8e\u5ba2\u670d NAT \u95ee\u9898"),Object(s.b)("li",{parentName:"ul"},"2015 \u5e74 \u540e\u76f8\u5173\u5f00\u53d1\u8f83\u5c11"),Object(s.b)("li",{parentName:"ul"},"\u9ed8\u8ba4\u7aef\u53e3 4569/udp"),Object(s.b)("li",{parentName:"ul"},"AES-128"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"https://datatracker.ietf.org/doc/html/rfc5456"},"rfc5456"),"\nIAX: Inter-Asterisk eXchange Version 2"))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"https://wiki.asterisk.org/wiki/pages/viewpage.action?pageId=4817138"},"Why IAX2?"),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"NAT"),Object(s.b)("li",{parentName:"ul"},"High performance, low overhead protocol",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"4 bytes overhead"))),Object(s.b)("li",{parentName:"ul"},"Internationalization - \u4f20\u8f93\u5305\u542b\u8bed\u8a00\u4fe1\u606f"),Object(s.b)("li",{parentName:"ul"},"Remote dialplan polling"),Object(s.b)("li",{parentName:"ul"},"Flexible authentication"),Object(s.b)("li",{parentName:"ul"},"Multimedia protocol"),Object(s.b)("li",{parentName:"ul"},"Call statistic gathering"),Object(s.b)("li",{parentName:"ul"},"Call parameter communication"),Object(s.b)("li",{parentName:"ul"},"Single socket design"))),Object(s.b)("li",{parentName:"ul"},"\u53c2\u8003",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"https://community.freepbx.org/t/is-iax2-still-best-trunk-type-for-internal-calling-between-freepbx-systems-specifically-related-to-encryption/61907/7"},"Is IAX2 still best trunk type for Internal Calling between FreePBX Systems?"))))),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("ul",{parentName:"div"},Object(s.b)("li",{parentName:"ul"},"\u548c\u8001\u8bbe\u5907\u4ea4\u4e92\u4e0d\u80fd\u76f4\u8fde\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651 IAX"),Object(s.b)("li",{parentName:"ul"},"\u5bb9\u5668\u90e8\u7f72\uff0c\u63d0\u4f9b webrtc\uff0c\u5bf9\u63a5\u4e0a\u6e38\u7ebf\u8def\u53ef\u4ee5\u8003\u8651 IAX")))),Object(s.b)("h2",{id:"iaxconf"},"iax.conf"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"type=user",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"\u670d\u52a1\u7aef\u5b9a\u4e49"))),Object(s.b)("li",{parentName:"ul"},"type=peer",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"\u5ba2\u6237\u7aef\u5b9a\u4e49"))),Object(s.b)("li",{parentName:"ul"},"type=friend",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"\u521b\u5efa user+peer")))),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},"iax2 reload\n")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-conf"},"[general]\n; \u914d\u7f6e\u9700\u8981\u5728 bindaddr \u4e4b\u524d\nbindport=4569\n\n; \u9ed8\u8ba4\u76d1\u542c\u6240\u6709\n; \u4e5f\u53ef\u4ee5\u5305\u542b\u7aef\u53e3 192.168.0.1:4569\n;bindaddr=192.168.0.1\n\n; \u72ec\u7acb\u7ebf\u7a0b\u5904\u7406 IAX2 DPREQ - \u4e00\u5b9a\u7684\u6027\u80fd\u6362\u53d6\u66f4\u597d\u7684\u5ef6\u65f6\n; \u9ed8\u8ba4 block \u5904\u7406\n; iaxcompat=yes\n\n; UDP checksum\n;nochecksums=yes\n\n; \u907f\u514d\u5bc6\u7801\u7206\u7834 - \u5ef6\u8fdf reject\n;delayreject=yes\n\n\n; \u5168\u5c40 iaxtel AMA flag - \u751f\u6210 cdr \u4f1a\u7528\u5230\n; default, omit, billing, documentation\n;amaflags=billing\n\n; ADSI/Analog Display Services Interface \u517c\u5bb9 CPE \u8bbe\u5907\n;adsi=yes\n\n; \u547c\u51fa\u65f6\u67e5\u8be2 SRV\n;srvlookup=yes\n\n; \u9ed8\u8ba4 CDR \u8d26\u53f7\n;accountcode=lss0101\n\n; \u9ed8\u8ba4\u8bed\u8a00\u4ee3\u7801\n;language=en\n\n; This option specifies a preference for which music-on-hold class this channel\n; should listen to when put on hold if the music class has not been set on the\n; channel with Set(CHANNEL(musicclass)=whatever) in the dialplan, and the peer\n; channel putting this one on hold did not suggest a music class.\n;\n; If this option is set to \"passthrough\", then the hold message will always be\n; passed through as signalling instead of generating hold music locally.\n;\n; This option may be specified globally, or on a per-user or per-peer basis.\n;\n; Accepted values: passthrough, or any music-on-hold class name\n; Default value:   <empty>\n;\n;mohinterpret=default\n;\n\n;\n; The 'mohsuggest' option specifies which music on hold class to suggest to the\n; peer channel when this channel places the peer on hold. It may be specified\n; globally or on a per-user or per-peer basis.\n;\n;mohsuggest=default\n;\n\n; \u5e26\u5bbd\u60c5\u51b5\n; low, medium, high\nbandwidth=low\n\n; \u7f16\u7801\u914d\u7f6e\n;allow=all\n;disallow=g723.1\ndisallow=lpc10\n;allow=gsm\n\n\n; Jitter Buffer/\u6296\u52a8\u7f13\u51b2\u5668\n; ======================\n;\n; You can adjust several parameters relating to the jitter buffer.  The jitter\n; buffer's function is to compensate for varying network delay.\n;\n; All of the jitter buffer settings are in milliseconds.  The jitter buffer\n; works for INCOMING audio only - the outbound audio will be dejittered by the\n; jitter buffer at the other end.\n;\n; jitterbuffer=yes|no: global default as to whether you want\n; the jitter buffer at all.\n;\n; maxjitterbuffer: a maximum size for the jitter buffer.\n; Setting a reasonable maximum here will prevent the call delay\n; from rising to silly values in extreme situations; you'll hear\n; SOMETHING, even though it will be jittery.\n;\n; resyncthreshold: when the jitterbuffer notices a significant change in delay\n; that continues over a few frames, it will resync, assuming that the change in\n; delay was caused by a timestamping mix-up. The threshold for noticing a\n; change in delay is measured as twice the measured jitter plus this resync\n; threshold.\n; Resyncing can be disabled by setting this parameter to -1.\n;\n; maxjitterinterps: the maximum number of interpolation frames the jitterbuffer\n; should return in a row. Since some clients do not send CNG/DTX frames to\n; indicate silence, the jitterbuffer will assume silence has begun after\n; returning this many interpolations. This prevents interpolating throughout\n; a long silence.\n;\n; jittertargetextra: number of milliseconds by which the new jitter buffer\n; will pad its size. the default is 40, so without modification, the new\n; jitter buffer will set its size to the jitter value plus 40 milliseconds.\n; increasing this value may help if your network normally has low jitter,\n; but occasionally has spikes.\n;\n\njitterbuffer=no\n;maxjitterbuffer=1000\n;maxjitterinterps=10\n;resyncthreshold=1000\n;jittertargetextra=40\n\n\n; IAX2 Encryption\n; ===============\n; \u5f00\u542f\u52a0\u5bc6\n;encryption=yes\n\n; \u5f3a\u5236\u52a0\u5bc6 - \u9690\u542b encryption=yes\n;forceencryption=yes\n\n; This option defines the maximum payload in bytes an IAX2 trunk can support at\n; a given time.  The best way to explain this is to provide an example.  If the\n; maximum number of calls to be supported is 800, and each call transmits 20ms\n; frames of audio using ulaw:\n;\n;     (8000hz / 1000ms) * 20ms * 1 byte per sample = 160 bytes per frame\n;\n; The maximum load in bytes is:\n;\n;     (160 bytes per frame) * (800 calls) = 128000 bytes\n;\n; Once this limit is reached, calls may be dropped or begin to lose audio.\n; Depending on the codec in use and number of channels to be supported this value\n; may need to be raised, but in most cases the default value is large enough.\n;\n; trunkmaxsize = 128000 ; defaults to 128000 bytes, which supports up to 800\n                        ; calls of ulaw at 20ms a frame.\n\n; With a large amount of traffic on IAX2 trunks, there is a risk of bad voice\n; quality when allowing the Linux system to handle fragmentation of UDP packets.\n; Depending on the size of each payload, allowing the OS to handle fragmentation\n; may not be very efficient. This setting sets the maximum transmission unit for\n; IAX2 UDP trunking. The default is 1240 bytes which means if a trunk's payload\n; is over 1240 bytes for every 20ms it will be broken into multiple 1240 byte\n; messages.  Zero disables this functionality and let's the OS handle\n; fragmentation.\n;\n; trunkmtu = 1240    ; trunk data will be sent in 1240 byte messages.\n\n; trunkfreq sets how frequently trunk messages are sent in milliseconds. This\n; value is 20ms by default, which means the trunk will send all the data queued\n; to it in the past 20ms.  By increasing the time between sending trunk messages,\n; the trunk's payload size will increase as well.  Note, depending on the size\n; set by trunkmtu, messages may be sent more often than specified.  For example\n; if a trunk's message size grows to the trunkmtu size before 20ms is reached\n; that message will be sent immediately.  Acceptable values are between 10ms and\n; 1000ms.\n;\n; trunkfreq=20    ; How frequently to send trunk msgs (in ms). This is 20ms by\n                  ; default.\n\n; Should we send timestamps for the individual sub-frames within trunk frames?\n; There is a small bandwidth use for these (less than 1kbps/call), but they\n; ensure that frame timestamps get sent end-to-end properly.  If both ends of\n; all your trunks go directly to TDM, _and_ your trunkfreq equals the frame\n; length for your codecs, you can probably suppress these.  The receiver must\n; also support this feature, although they do not also need to have it enabled.\n;\n; trunktimestamps=yes\n\n; Minimum and maximum amounts of time that IAX2 peers can request as a\n; registration expiration interval (in seconds).\n; minregexpire = 60\n; maxregexpire = 60\n\n; IAX2 helper threads\n\n; Establishes the number of iax helper threads to handle I/O.\n; iaxthreadcount = 10\n\n; Establishes the number of extra dynamic threads that may be spawned to handle I/O\n; iaxmaxthreadcount = 100\n\n;\n; We can register with another IAX2 server to let him know where we are\n; in case we have a dynamic IP address for example\n;\n; Register with tormenta using username marko and password secretpass\n;\n;register => marko:secretpass@tormenta.linux-support.net\n;\n; Register joe at remote host with no password\n;\n;register => joe@remotehost:5656\n;\n; Register marko at tormenta.linux-support.net using RSA key \"torkey\"\n;\n;register => marko:[torkey]@tormenta.linux-support.net\n;\n; Sample Registration for iaxtel\n;\n; Visit http://www.iaxtel.com to register with iaxtel.  Replace \"user\"\n; and \"pass\" with your username and password for iaxtel.  Incoming\n; calls arrive at the \"s\" extension of \"default\" context.\n;\n;register => user:pass@iaxtel.com\n;\n; Sample Registration for IAX2 + FWD\n;\n; To register using IAX2 with FWD, it must be enabled by visiting the URL\n; http://www.fwdnet.net/index.php?section_id=112\n;\n; Note that you need an extension in you default context which matches\n; your free world dialup number.  Please replace \"FWDNumber\" with your\n; FWD number and \"passwd\" with your password.\n;\n;register => FWDNumber:passwd@iax.fwdnet.net\n;\n; Through the use of the res_stun_monitor module, Asterisk has the ability to detect when the\n; perceived external network address has changed.  When the stun_monitor is installed and\n; configured, chan_iax will renew all outbound registrations when the monitor detects any sort\n; of network change has occurred. By default this option is enabled, but only takes effect once\n; res_stun_monitor is configured.  If res_stun_monitor is enabled and you wish to not\n; generate all outbound registrations on a network change, use the option below to disable\n; this feature.\n;\n; subscribe_network_change_event = yes ; on by default\n;\n; You can enable authentication debugging to increase the amount of\n; debugging traffic.\n;\n;authdebug = yes\n;\n; See https://wiki.asterisk.org/wiki/display/AST/IP+Quality+of+Service for a description of these parameters.\n;tos=ef\n;cos=5\n;\n; If regcontext is specified, Asterisk will dynamically create and destroy\n; a NoOp priority 1 extension for a given peer who registers or unregisters\n; with us.  The actual extension is the 'regexten' parameter of the registering\n; peer or its name if 'regexten' is not provided.  More than one regexten\n; may be supplied if they are separated by '&'.  Patterns may be used in\n; regexten.\n;\n;regcontext=iaxregistrations\n;\n; If we don't get ACK to our NEW within 2000ms, and autokill is set to yes,\n; then we cancel the whole thing (that's enough time for one retransmission\n; only).  This is used to keep things from stalling for a long time for a host\n; that is not available, but would be ill advised for bad connections.  In\n; addition to 'yes' or 'no' you can also specify a number of milliseconds.\n; See 'qualify' for individual peers to turn on for just a specific peer.\n;\nautokill=yes\n;\n; codecpriority controls the codec negotiation of an inbound IAX2 call.\n; This option is inherited to all user entities.  It can also be defined\n; in each user entity separately which will override the setting in general.\n;\n; The valid values are:\n;\n; caller   - Consider the callers preferred order ahead of the host's.\n; host     - Consider the host's preferred order ahead of the caller's.\n; disabled - Disable the consideration of codec preference altogether.\n;            (this is the original behaviour before preferences were added)\n; reqonly  - Same as disabled, only do not consider capabilities if\n;            the requested format is not available the call will only\n;            be accepted if the requested format is available.\n;\n; The default value is 'host'\n;\n;codecpriority=host\n;\n; allowfwdownload controls whether this host will serve out firmware to\n; IAX2 clients which request it.  This has only been used for the IAXy,\n; and it has been recently proven that this firmware distribution method\n; can be used as a source of traffic amplification attacks.  Also, the\n; IAXy firmware has not been updated for at least 18 months, so unless\n; you are provisioning IAXys in a secure network, we recommend that you\n; leave this option to the default, off.\n;\n;allowfwdownload=yes\n\n;rtcachefriends=yes ; Cache realtime friends by adding them to the internal list\n                    ; just like friends added from the config file only on a\n                    ; as-needed basis? (yes|no)\n\n;rtsavesysname=yes  ; Save systemname in realtime database at registration\n                    ; Default = no\n\n;rtupdate=yes       ; Send registry updates to database using realtime? (yes|no)\n                    ; If set to yes, when a IAX2 peer registers successfully,\n                    ; the IP address, the origination port, the registration period,\n                    ; and the username of the peer will be set to database via realtime.\n                    ; If not present, defaults to 'yes'.\n\n;rtautoclear=yes    ; Auto-Expire friends created on the fly on the same schedule\n                    ; as if it had just registered? (yes|no|<seconds>)\n                    ; If set to yes, when the registration expires, the friend will\n                    ; vanish from the configuration until requested again.\n                    ; If set to an integer, friends expire within this number of\n                    ; seconds instead of the registration interval.\n\n;rtignoreregexpire=yes ; When reading a peer from Realtime, if the peer's registration\n                       ; has expired based on its registration interval, used the stored\n                       ; address information regardless. (yes|no)\n\n;parkinglot=edvina     ; Default parkinglot for IAX2 peers and users\n                       ; This can also be configured per device\n                       ; Parkinglots are defined in features.conf\n\n;\n; The following two options are used to disable call token validation for the\n; purposes of interoperability with IAX2 endpoints that do not yet support it.\n;\n; Call token validation can be set as optional for a single IP address or IP\n; address range by using the 'calltokenoptional' option. 'calltokenoptional' is\n; only a global option.\n;\n;calltokenoptional=209.16.236.73/255.255.255.0\n;\n; By setting 'requirecalltoken=no', call token validation becomes optional for\n; that peer/user.  By setting 'requirecalltoken=auto', call token validation\n; is optional until a call token supporting peer registers successfully using\n; call token validation.  This is used as an indication that from now on, we\n; can require it from this peer.  So, requirecalltoken is internally set to yes.\n; requirecalltoken may only be used in peer/user/friend definitions,\n; not in the global scope.\n; By default, 'requirecalltoken=yes'.\n;\n;requirecalltoken=no\n;\n; Maximum time allowed for call token authentication handshaking. Default is 10 seconds.\n; Use higher values in lagged or high packet loss networks.\n;\n;calltokenexpiration=10\n\n;\n; These options are used to limit the amount of call numbers allocated to a\n; single IP address.  Before changing any of these values, it is highly encouraged\n; to read the user guide associated with these options first.  In most cases, the\n; default values for these options are sufficient.\n;\n; The 'maxcallnumbers' option limits the amount of call numbers allowed for each\n; individual remote IP address.  Once an IP address reaches it's call number\n; limit, no more new connections are allowed until the previous ones close.  This\n; option can be used in a peer definition as well, but only takes effect for\n; the IP of a dynamic peer after it completes registration.\n;\n;maxcallnumbers=512\n;\n; The 'maxcallnumbers_nonvalidated' is used to set the combined number of call\n; numbers that can be allocated for connections where call token  validation\n; has been disabled.  Unlike the 'maxcallnumbers' option, this limit is not\n; separate for each individual IP address.  Any connection resulting in a\n; non-call token validated call number being allocated contributes to this\n; limit.  For use cases, see the call token user guide.  This option's\n; default value of 8192 should be sufficient in most cases.\n;\n;maxcallnumbers_nonvalidated=1024\n;\n; The [callnumberlimits] section allows custom call number limits to be set\n; for specific IP addresses and IP address ranges.  These limits take precedence\n; over the global 'maxcallnumbers' option, but may still be overridden by a\n; peer defined 'maxcallnumbers' entry.  Note that these limits take effect\n; for every individual address within the range, not the range as a whole.\n;\n;[callnumberlimits]\n;10.1.1.0/255.255.255.0 = 24\n;10.1.2.0/255.255.255.0 = 32\n;\n\n; The shrinkcallerid function removes '(', ' ', ')', non-trailing '.', and '-' not\n; in square brackets.  For example, the Caller*ID value 555.5555 becomes 5555555\n; when this option is enabled.  Disabling this option results in no modification\n; of the Caller*ID value, which is necessary when the Caller*ID represents something\n; that must be preserved.  This option can only be used in the [general] section.\n; By default this option is on.\n;\n;shrinkcallerid=yes     ; on by default\n\n; guest \u914d\u7f6e\u672a\u8ba4\u8bc1\u8fde\u63a5\u8bf7\u6c42 - \u53ef\u914d\u7f6e secret\n[guest]\ntype=user\ncontext=public\ncallerid=\"Guest IAX User\"\n\n; Trust Caller*ID Coming from iaxtel.com\n[iaxtel]\ntype=user\ncontext=default\nauth=rsa\ninkeys=iaxtel\n\n; Trust Caller*ID Coming from iax.fwdnet.net\n[iaxfwd]\ntype=user\ncontext=default\nauth=rsa\ninkeys=freeworlddialup\n\n; Trust Caller*ID delivered over DUNDi/e164\n;[dundi]\n;type=user\n;dbsecret=dundi/secret\n;context=dundi-e164-local\n\n;\n; Further user sections may be added, specifying a context and a secret used\n; for connections with that given authentication name.  Limited IP based\n; access control is allowed by use of \"permit\", \"deny\", and \"acl\" keywords.\n; Multiple rules are permitted. Multiple permitted contexts may be specified,\n; in which case the first will be the default.  You can also override\n; Caller*ID so that when you receive a call you set the Caller*ID to be what\n; you want instead of trusting what the remote user provides\n;\n; There are three authentication methods that are supported:  md5, plaintext,\n; and rsa.  The least secure is \"plaintext\", which sends passwords cleartext\n; across the net.  \"md5\" uses a challenge/response md5 sum arrangement, but\n; still requires both ends have plain text access to the secret.  \"rsa\" allows\n; unidirectional secret knowledge through public/private keys.  If \"rsa\"\n; authentication is used, \"inkeys\" is a list of acceptable public keys on the\n; local system that can be used to authenticate the remote peer, separated by\n; the \":\" character.  \"outkey\" is a single, private key to use to authenticate\n; to the other side.  Public keys are named /var/lib/asterisk/keys/<name>.pub\n; while private keys are named /var/lib/asterisk/keys/<name>.key.  Private\n; keys should always be 3DES encrypted.\n;\n;\n; NOTE: All hostnames and IP addresses in this file are for example purposes\n;       only; you should not expect any of them to actually be available for\n;       your use.\n\n; \u7528\u6237\u914d\u7f6e\n;[markster]\n;type=user\n;context=default\n;context=local\n;auth=md5,plaintext,rsa\n;secret=markpasswd\n;setvar=ATTENDED_TRANSFER_COMPLETE_SOUND=beep   ; This channel variable will\n                                                ; cause the given audio file to\n                                                ; be played upon completion of\n                                                ; an attended transfer to the\n                                                ; target of the transfer.\n;dbsecret=mysecrets/place    ; Secrets can be stored in astdb, too\n;transfer=no                 ; Disable IAX2 native transfer\n;transfer=mediaonly          ; When doing IAX2 native transfers, transfer only\n                             ; the media stream\n;jitterbuffer=yes            ; Override the global setting and enable the jitter\n                             ; buffer for this user\n;maxauthreq=10               ; Set the maximum number of outstanding AUTHREQs\n                             ; waiting for replies. If this limit is reached,\n                             ; any further authentication will be blocked, until\n                             ; the pending requests expire or a reply is\n                             ; received.\n;callerid=\"Mark Spencer\" <(256) 428-6275>\n;deny=0.0.0.0/0.0.0.0\n;accountcode=markster0101\n;permit=209.16.236.73/255.255.255.0\n;language=en                 ; Use english as default language\n;encryption=yes              ; Enable IAX2 encryption.  The default is no.\n;keyrotate=off               ; This is a compatibility option for older versions\n                             ; of IAX2 that do not support key rotation with\n                             ; encryption.  This option will disable the\n                             ; IAX_COMMAND_RTENC message.  The default is on.\n\n;\n; \u5b9a\u4e49\u8fdc\u7a0b\u8282\u70b9 peer\n;\n;[demo]\n;type=peer\n;username=asterisk\n;secret=supersecret\n;host=192.168.10.10\n; iax2 show peers \u63cf\u8ff0\n;description=My IAX2 Peer\n;sendani=no\n;host=asterisk.linux-support.net\n;port=5036\n;mask=255.255.255.255\n;qualify=yes                ; Make sure this peer is alive.\n;qualifysmoothing = yes     ; Use an average of the last two PONG results to\n                            ; reduce falsely detected LAGGED hosts.  The default\n                            ; is 'no.'\n;qualifyfreqok = 60000      ; How frequently to ping the peer when everything\n                            ; seems to be OK, in milliseconds.\n;qualifyfreqnotok = 10000   ; How frequently to ping the peer when it's either\n                            ; LAGGED or UNAVAILABLE, in milliseconds.\n;jitterbuffer=no            ; Turn off jitter buffer for this peer\n;\n;encryption=yes             ; Enable IAX2 encryption.  The default is no.\n;keyrotate=off              ; This is a compatibility option for older versions\n                            ; of IAX2 that do not support key rotation with\n                            ; encryption.  This option will disable the\n                            ; IAX_COMMAND_RTENC message.  The default is 'on.'\n\n; Peers can remotely register as well, so that they can be mobile.  Default\n; IPs can also optionally be given but are not required.  Caller*ID can be\n; suggested to the other side as well if it is for example a phone instead of\n; another PBX.\n;connectedline=yes ; Set if connected line and redirecting information updates\n;                  ; are passed between Asterisk servers for this peer.\n;                  ; yes - Sending and receiving updates are enabled.\n;                  ; send - Only send updates.\n;                  ; receive - Only process received updates.\n;                  ; no - Sending and receiving updates are disabled.\n;                  ; Default is \"no\".\n;                  ;\n;                  ; Note: Because of an incompatibility between Asterisk v1.4\n;                  ; and Asterisk v1.8 or later, this option must be set\n;                  ; to \"no\" toward the Asterisk v1.4 peer.  A symptom of the\n;                  ; incompatibility is the call gets disconnected unexpectedly.\n\n\n;[dynamichost]\n;host=dynamic\n;secret=mysecret\n; Note: app_voicemail mailboxes must be in the form of mailbox@context.\n;mailbox=1234       ; Notify about mailbox 1234\n;inkeys=key1:key2\n;peercontext=local  ; Default context to request for calls to peer\n;defaultip=216.207.245.34\n;callerid=\"Some Host\" <(256) 428-6011>\n\n;[biggateway]\n;type=peer\n;host=192.168.0.1\n;description=Gateway to PSTN\n;context=*\n;secret=myscret\n;trunk=yes          ; Use IAX2 trunking with this host\n;timezone=America/New_York  ; Set a timezone for the date/time IE\n\n;\n; Friends are a shortcut for creating a user and a peer with the same values.\n;\n\n;[marko]\n;type=friend\n;host=dynamic\n;regexten=1234\n;secret=moofoo   ; Multiple secrets may be specified. For a \"user\", all\n;secret=foomoo   ; specified entries will be accepted as valid. For a \"peer\",\n;secret=shazbot  ; only the last specified secret will be used.\n;context=default\n;permit=0.0.0.0/0.0.0.0\n;acl=example_named_acl\n\n;\n; With immediate=yes, an IAX2 phone or a phone on an IAXy acts as a hot-line\n; which goes immediately to the s extension when picked up.  Useful for\n; elevator phones, manual service, or other similar applications.\n;\n;[manual]\n;type=friend\n;host=dynamic\n;immediate=yes  ; go immediately to s extension when picked up\n;secret=moofoo  ; when immediate=yes is specified, secret is required\n;context=number-please ; we start at the s extension in this context\n;\n")))}u.isMDXComponent=!0}}]);