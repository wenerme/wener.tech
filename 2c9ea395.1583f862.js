(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{1114:function(e,a,r){"use strict";r.d(a,"a",(function(){return d})),r.d(a,"b",(function(){return u}));var t=r(0),o=r.n(t);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function g(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function p(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),m=function(e){var a=o.a.useContext(c),r=a;return e&&(r="function"==typeof e?e(a):g(g({},a),e)),r},d=function(e){var a=m(e.components);return o.a.createElement(c.Provider,{value:a},e.children)},l={inlineCode:"code",wrapper:function(e){var a=e.children;return o.a.createElement(o.a.Fragment,{},a)}},s=o.a.forwardRef((function(e,a){var r=e.components,t=e.mdxType,n=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=m(r),s=t,u=d["".concat(i,".").concat(s)]||d[s]||l[s]||n;return r?o.a.createElement(u,g(g({ref:a},c),{},{components:r})):o.a.createElement(u,g({ref:a},c))}));function u(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var n=r.length,i=new Array(n);i[0]=s;var g={};for(var p in a)hasOwnProperty.call(a,p)&&(g[p]=a[p]);g.originalType=e,g.mdxType="string"==typeof e?e:t,i[1]=g;for(var c=2;c<n;c++)i[c]=r[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},261:function(e,a,r){"use strict";r.r(a),r.d(a,"frontMatter",(function(){return i})),r.d(a,"metadata",(function(){return g})),r.d(a,"toc",(function(){return p})),r.d(a,"default",(function(){return m}));var t=r(3),o=r(8),n=(r(0),r(1114)),i={title:"ArgoCD Image Updater"},g={unversionedId:"devops/kubernetes/app/argocd-image-updater",id:"devops/kubernetes/app/argocd-image-updater",isDocsHomePage:!1,title:"ArgoCD Image Updater",description:"- argoproj-labs/argocd-image-updater",source:"@site/notes/devops/kubernetes/app/argocd-image-updater.md",slug:"/devops/kubernetes/app/argocd-image-updater",permalink:"/notes/devops/kubernetes/app/argocd-image-updater",editUrl:"https://github.com/wenerme/wener/edit/master/notes/devops/kubernetes/app/argocd-image-updater.md",version:"current",sidebar:"docs",previous:{title:"ArgoCD ApplicationSet",permalink:"/notes/devops/kubernetes/app/argocd-applicationset"},next:{title:"ArgoCD Notifications",permalink:"/notes/devops/kubernetes/app/argocd-notifications"}},p=[{value:"\u914d\u7f6e",id:"\u914d\u7f6e",children:[]}],c={toc:p};function m(e){var a=e.components,r=Object(o.a)(e,["components"]);return Object(n.b)("wrapper",Object(t.a)({},c,r,{components:a,mdxType:"MDXLayout"}),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://github.com/argoproj-labs/argocd-image-updater"},"argoproj-labs/argocd-image-updater"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"\u57fa\u4e8e argocd \u81ea\u52a8\u66f4\u65b0\u955c\u50cf"),Object(n.b)("li",{parentName:"ul"},"\u652f\u6301\u5199\u56de\u5230\u4ed3\u5e93"))),Object(n.b)("li",{parentName:"ul"},"ConfigMap argocd-image-updater-config"),Object(n.b)("li",{parentName:"ul"},"semver \u4f7f\u7528 ",Object(n.b)("a",{parentName:"li",href:"https://github.com/Masterminds/semver"},"Masterminds/semver")," \u5b9e\u73b0"),Object(n.b)("li",{parentName:"ul"},"\u9650\u5236",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"\u53ea\u80fd\u66f4\u65b0 ArgoCD \u7ba1\u7406\u7684\u5bb9\u5668"),Object(n.b)("li",{parentName:"ul"},"\u53ea\u80fd\u66f4\u65b0 Kustomize \u6216 Helm \u751f\u6210\u7684\u5bb9\u5668"),Object(n.b)("li",{parentName:"ul"},"pull secrets \u5fc5\u987b\u5728\u76f8\u540c\u96c6\u7fa4"))),Object(n.b)("li",{parentName:"ul"},"Application \u7ef4\u5ea6 \u6dfb\u52a0 annotation",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"image-list \u76d1\u542c\u7684\u955c\u50cf")))),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},'# \u5b89\u88c5\nkubectl install -f https://raw.githubusercontent.com/argoproj-labs/argocd-image-updater/stable/manifests/install.yaml\n\nkubectl annotate app guestbook \\\n    argocd-image-updater.argoproj.io/image-list=gcr.io/heptio-images/ks-guestbook-demo \\\n    argocd-image-updater.argoproj.io/write-back-method=git\n\n# Github \u4ed3\u5e93\n# export GITHUB_PULLSECRET="<username>:<token>"\n# \u6d4b\u8bd5\u955c\u50cf - \u68c0\u6d4b\u7248\u672c\u3001\u662f\u5426\u5347\u7ea7\u7b49\nargocd-image-updater test nginx\n')),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-yaml"},'argocd-image-updater.argoproj.io/write-back-method: git\n# \u5e26\u8ba4\u8bc1\u4fe1\u606f\nargocd-image-updater.argoproj.io/write-back-method: git:secret:argocd-image-updater/git-creds\n# \u53ef\u6307\u5b9a\u5206\u652f\nargocd-image-updater.argoproj.io/git-branch: main\n\nargocd-image-updater.argoproj.io/myalias.force-update: "true"\n# \u6307\u5b9a\u79c1\u94a5\n# secret:<namespace>/<secret_name>#<field>\n# pullsecret:<namespace>/<secret_name> \u5305\u542b .dockerconfigjson \u5b57\u6bb5\n# env:<variable_name>\n# ext:<path_to_script> \u811a\u672c\u751f\u6210\nargocd-image-updater.argoproj.io/<image_name>.pull-secret: <secret_ref>\n\n# kustomize \u4fee\u6539\u955c\u50cf\n# kustomize edit set image quay.io/argoproj/argocd=ghcr.io/argoproj/argocd\nargocd-image-updater.argoproj.io/<image_alias>.kustomize.image_name: <original_image_name>\n\n# semver\n# \u8bed\u6cd5 [<alias_name>=]<image_path>[:<version_constraint>]\nargocd-image-updater.argoproj.io/image-list: some/image:v1.2.x\n# semver \u4e3a\u9ed8\u8ba4\nargocd-image-updater.argoproj.io/<image>.update-strategy: semver\n\n# \u5347\u7ea7\u6700\u65b0\nargocd-image-updater.argoproj.io/image-list: <alias>=some/image\nargocd-image-updater.argoproj.io/<alias>.update-strategy: latest\n# \u9650\u5236 tag\nargocd-image-updater.argoproj.io/myimage.allow-tags: regexp:^[0-9a-f]{7}$\n# \u5ffd\u7565 tag\nargocd-image-updater.argoproj.io/myimage.ignore-tags: latest, master\n\n# \u6458\u8981\nargocd-image-updater.argoproj.io/image-list: <alias>=some/image:<tag_name>\nargocd-image-updater.argoproj.io/<alias>.update-strategy: digest\n\n# \u540d\u5b57\n# tag \u6392\u5e8f\uff0c\u9002\u7528\u4e8e tag \u4e3a YYYY-MM-DD \u573a\u666f\nargocd-image-updater.argoproj.io/image-list: <alias>=some/image\nargocd-image-updater.argoproj.io/<alias>.update-strategy: name\n\n# Demo\n# =======\n# Helm \u53c2\u6570\nargocd-image-updater.argoproj.io/image-list: dex=quay.io/dexidp/dex\nargocd-image-updater.argoproj.io/dex.helm.image-name: dex.image.name\nargocd-image-updater.argoproj.io/dex.helm.image-tag: dex.image.tag\n\n# Helm \u591a\u955c\u50cf\nargocd-image-updater.argoproj.io/image-list: fooalias=foo/bar, baralias=bar/foo\nargocd-image-updater.argoproj.io/fooalias.helm.image-name: foo.image\nargocd-image-updater.argoproj.io/fooalias.helm.image-tag: foo.tag\nargocd-image-updater.argoproj.io/baralias.helm.image-name: bar.image\nargocd-image-updater.argoproj.io/baralias.helm.image-tag: bar.tag\n')),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-yaml"},"data:\n  # \u63d0\u4ea4\u6d88\u606f\u6a21\u677f\n  git.commit-message-template: |\n    build: automatic update of {{ .AppName }}\n\n    {{ range .AppChanges -}}\n    updates image {{ .Image }} tag '{{ .OldTag }}' to '{{ .NewTag }}'\n    {{ end -}}\n")),Object(n.b)("h2",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"cm argocd-image-updater-config")),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-yaml"},"data:\n  applications_api: argocd\n  # The address of Argo CD API endpoint - defaults to argocd-server.argocd\n  argocd.server_addr: <FQDN or IP of your Argo CD server>\n  # Whether to use GRPC-web protocol instead of GRPC over HTTP/2\n  argocd.grpc_web: true\n  # Whether to ignore invalid TLS cert from Argo CD API endpoint\n  argocd.insecure: false\n  # Whether to use plain text connection (http) instead of TLS (https)\n  argocd.plaintext: false\n\n  argocd.token:\n")))}m.isMDXComponent=!0}}]);